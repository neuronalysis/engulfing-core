

window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",

	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	} ],
	getOntologyPropertyByName : function(name) {
		var relOCOC_Properties = this
				.get('RelationOntologyClassOntologyProperties');
		for (var i = 0; i < relOCOC_Properties.length; i++) {
			if (relOCOC_Properties.models[i].get('OntologyProperty')
					.get('name') === name) {
				return relOCOC_Properties.models[i].get('OntologyProperty');
			}
		}

		return false;
	}
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({

});
window.IncomingOntologyClass = OntologyClass.extend({

});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});


window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",

	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	} ],
	getOntologyPropertyByName : function(name) {
		var relOCOC_Properties = this
				.get('RelationOntologyClassOntologyProperties');
		for (var i = 0; i < relOCOC_Properties.length; i++) {
			if (relOCOC_Properties.models[i].get('OntologyProperty')
					.get('name') === name) {
				return relOCOC_Properties.models[i].get('OntologyProperty');
			}
		}

		return false;
	}
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({

});
window.IncomingOntologyClass = OntologyClass.extend({

});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});


window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",

	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	} ],
	getOntologyPropertyByName : function(name) {
		var relOCOC_Properties = this
				.get('RelationOntologyClassOntologyProperties');
		for (var i = 0; i < relOCOC_Properties.length; i++) {
			if (relOCOC_Properties.models[i].get('OntologyProperty')
					.get('name') === name) {
				return relOCOC_Properties.models[i].get('OntologyProperty');
			}
		}

		return false;
	}
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({

});
window.IncomingOntologyClass = OntologyClass.extend({

});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});


window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});


window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});


window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});


window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});


window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});


window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});


window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});


window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	var name;
    	var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
    	
    	for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === "name") {
    			name = relations.models[i].get('OntologyPropertyEntity');
    		}
    	}
    	
		return name;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});


window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	var name;
    	var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
    	
    	for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === "name") {
    			name = relations.models[i].get('OntologyPropertyEntity');
    		}
    	}
    	
		return name;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});


window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	var name;
    	var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
    	
    	for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === "name") {
    			name = relations.models[i].get('OntologyPropertyEntity');
    		}
    	}
    	
		return name;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});


window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	var name;
    	var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
    	
    	for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === "name") {
    			name = relations.models[i].get('OntologyPropertyEntity');
    		}
    	}
    	
		return name;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});

window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	var name;
    	var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
    	
    	for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === "name") {
    			name = relations.models[i].get('OntologyPropertyEntity');
    		}
    	}
    	
		return name;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	var name;
    	var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
    	
    	for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === "name") {
    			name = relations.models[i].get('OntologyPropertyEntity');
    		}
    	}
    	
		return name;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	var name;
    	var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
    	
    	for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === "name") {
    			name = relations.models[i].get('OntologyPropertyEntity');
    		}
    	}
    	
		return name;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	var name;
    	var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
    	
    	for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === "name") {
    			name = relations.models[i].get('OntologyPropertyEntity');
    		}
    	}
    	
		return name;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	}],
    getOntologyPropertyByName: function (name) {
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
    	for (var i=0; i < relOCOC_Properties.length; i++) {
    		if (relOCOC_Properties.models[i].get('OntologyProperty').get('name') === name) {
    			return relOCOC_Properties.models[i].get('OntologyProperty');
    		}
    	}
		
		return false;
    }
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({
	
});
window.IncomingOntologyClass = OntologyClass.extend({
	
});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",

	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	} ],
	getOntologyPropertyByName : function(name) {
		var relOCOC_Properties = this
				.get('RelationOntologyClassOntologyProperties');
		for (var i = 0; i < relOCOC_Properties.length; i++) {
			if (relOCOC_Properties.models[i].get('OntologyProperty')
					.get('name') === name) {
				return relOCOC_Properties.models[i].get('OntologyProperty');
			}
		}

		return false;
	}
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({

});
window.IncomingOntologyClass = OntologyClass.extend({

});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",

	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	} ],
	getOntologyPropertyByName : function(name) {
		var relOCOC_Properties = this
				.get('RelationOntologyClassOntologyProperties');
		for (var i = 0; i < relOCOC_Properties.length; i++) {
			if (relOCOC_Properties.models[i].get('OntologyProperty')
					.get('name') === name) {
				return relOCOC_Properties.models[i].get('OntologyProperty');
			}
		}

		return false;
	}
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({

});
window.IncomingOntologyClass = OntologyClass.extend({

});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",

	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	} ],
	getOntologyPropertyByName : function(name) {
		var relOCOC_Properties = this
				.get('RelationOntologyClassOntologyProperties');
		for (var i = 0; i < relOCOC_Properties.length; i++) {
			if (relOCOC_Properties.models[i].get('OntologyProperty')
					.get('name') === name) {
				return relOCOC_Properties.models[i].get('OntologyProperty');
			}
		}

		return false;
	}
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({

});
window.IncomingOntologyClass = OntologyClass.extend({

});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.Ontology = Master.extend({
	urlRoot : kmapiHost + "km/ontologies",
	
	defaults : {
		"id" : null,
		"name" : "",
		"isPrivate" : false,
		"isFinal" : false,
		"Owner" : null,
		"OntologyClasses" : null,
		"OntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Owner'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyClasses',
		relatedModel : 'OntologyClass',
		collectionType : 'OntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'OntologyProperties',
		relatedModel : 'OntologyProperty',
		collectionType : 'OntologyPropertyCollection'
	} ]
});

window.OntologyCollection = MasterCollection.extend({
	model : Ontology,
	url : kmapiHost + "km/ontologies"
});
window.OntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclasses",
	type : "OntologyClass",

	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Ressource" : null,
		"isPersistedConcrete" : null,
		"Lexemes" : null,
		"RelationOntologyClassOntologyClasses" : null,
		"RelationOntologyClassOntologyProperties" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClasses',
		relatedModel : 'RelationOntologyClassOntologyClass',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyProperties',
		relatedModel : 'RelationOntologyClassOntologyProperty',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyCollection'

	} ],
	getOntologyPropertyByName : function(name) {
		var relOCOC_Properties = this
				.get('RelationOntologyClassOntologyProperties');
		for (var i = 0; i < relOCOC_Properties.length; i++) {
			if (relOCOC_Properties.models[i].get('OntologyProperty')
					.get('name') === name) {
				return relOCOC_Properties.models[i].get('OntologyProperty');
			}
		}

		return false;
	}
});

window.OntologyClassCollection = MasterCollection.extend({
	model : OntologyClass,
	url : kmapiHost + "km/ontologyclasses"
});

window.OutgoingOntologyClass = OntologyClass.extend({

});
window.IncomingOntologyClass = OntologyClass.extend({

});
window.OntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyclassentities",
	type : "OntologyClassEntity",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyClassEntities',
		relatedModel : 'RelationOntologyClassOntologyClassEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyClassEntityCollection'
	}, {
		type : Backbone.HasMany,
		key : 'RelationOntologyClassOntologyPropertyEntities',
		relatedModel : 'RelationOntologyClassOntologyPropertyEntity',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'RelationOntologyClassOntologyPropertyEntityCollection'

	}, {
		type : Backbone.HasOne,
		key : 'Ressource',
		relatedModel : 'Ressource'
	} ],
    getNameProperty : function() {
    	return this.getPropertyEntityByName('name');
	},
    getPropertyEntityByName : function(name) {
		for (var i=0; i < this.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
				return this.get('RelationOntologyClassOntologyPropertyEntities').models[i].get('OntologyPropertyEntity');
			}
		}
		
		return false;
 	},
    getClassEntities : function(name) {
    	var classEntities = [];
		
		for (var i=0; i < this.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			if (this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === name) {
				classEntities.push(this.get('RelationOntologyClassOntologyClassEntities').models[i].get('IncomingOntologyClassEntity'));
			}
		}
		
		
		for (var i=0; i < this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models.length; i++) {
			if (this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass').get('name') === name) {
				var ontologyClass =  this.get('OntologyClass').get('RelationOntologyClassOntologyClasses').models[i].get('IncomingOntologyClass');
				
				
			}
		}
		
		if (classEntities.length == 0) {
			var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
				id : null,
				OntologyClass : ontologyClass
			});
			
			classEntities.push(classEntity);
		}
		
		
		var relsOCOP = ontologyClass.get('RelationOntologyClassOntologyProperties');
		
		for (var e=0; e < classEntities.length; e++) {
			for (var i=0; i < relsOCOP.models.length; i++) {
				if (!classEntities[e].hasPropertyByName(relsOCOP.models[i].get('OntologyProperty').get('name'))) {
					var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
						id : null,
						OntologyPropertyEntity : new OntologyPropertyEntity({
							id : null,
							name: "",
							OntologyProperty : relsOCOP.models[i].get('OntologyProperty')
						})
					});
					
					classEntities[0].get('RelationOntologyClassOntologyPropertyEntities').push(relOCOPEntity);
				}
			}
		}
		
		return classEntities;
	},
	hasPropertyByName : function(name) {
		var relations = this.get('RelationOntologyClassOntologyPropertyEntities');
		
		for (var i = 0; i < relations.length; i++) {
    		if (relations.models[i].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === name) {
    			return true;
    		}
    	}
		
		return false;
	}
	
});

window.OntologyClassEntityCollection = MasterCollection.extend({
	model : OntologyClassEntity,
	url : kmapiHost + "km/ontologyclassentities"
});


window.OutgoingOntologyClassEntity = OntologyClassEntity.extend({
	type : "OutoingOntologyClassEntity"
	
});
window.IncomingOntologyClassEntity = OntologyClassEntity.extend({
	type : "IncomingOntologyClassEntity"
	
});
window.OntologyEntity = Backbone.Model.extend({
	urlRoot : kmapiHost + "km/Ontologyentitys",

	defaults : {
		"id" : null
	}
});

window.OntologyEntityCollection = Backbone.Collection.extend({
	model : OntologyEntity,
	url : kmapiHost + "km/Ontologyentitys"
});
window.OntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/ontologyproperties",
	type : "OntologyProperty",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Type" : null,
		"Ontology" : null,
		"Lexemes" : null,
		"isIdentifier" : false,
		"isMandatory" : false,
		"length" : null,
		"validationRegularExpression" : "",
		"defaultValue" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	},{
		type : Backbone.HasOne,
		key : 'Type',
		relatedModel : 'Type'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyCollection = MasterCollection.extend({
	model : OntologyProperty,
	url : kmapiHost + "km/ontologyproperties"
});

window.Type = Backbone.RelationalModel.extend({
	type : "Type",
	defaults : {
		"id" : null,
		"text" : ""
	},
	enumeration : [ {
		id : "0",
		text : "Text"
	}, {
		id : "1",
		text : "Date"
	}, {
		id : "2",
		text : "Number"
	}, {
		id : "3",
		text : "Boolean"
	} ]
});
window.OntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologypropertyentities",
	type : "OntologyPropertyEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyPropertyEntityCollection = MasterCollection.extend({
	model : OntologyPropertyEntity,
	url : kmapiHost + "km/ontologypropertyentities"
});
window.OntologyRelationType = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypes",
	type : "OntologyRelationType",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Ontology" : null,
		"Lexemes" : null
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeCollection = MasterCollection.extend({
	model : OntologyRelationType,
	url : kmapiHost + "km/ontologyrelationtypes"
});
window.OntologyRelationTypeEntity = Master.extend({
	urlRoot : kmapiHost + "km/ontologyrelationtypeentities",
	type : "OntologyRelationTypeEntity",
	
	defaults : {
		"id" : null,
		"name" : ""
	},

	relations : [  {
		type : Backbone.HasOne,
		key : 'Ontology',
		relatedModel : 'Ontology'
	}, {
		type : Backbone.HasMany,
		key : 'Lexemes',
		relatedModel : 'Lexeme',
		collectionType : 'LexemeCollection'
	} ]
});

window.OntologyRelationTypeEntityCollection = MasterCollection.extend({
	model : OntologyRelationTypeEntity,
	url : kmapiHost + "km/ontologyrelationtypeentities"
});
window.RelationOntologyClassOntologyClass = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClass',
		relatedModel : 'OutgoingOntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClass',
		relatedModel : 'IncomingOntologyClass'
	} ]

});

window.RelationOntologyClassOntologyClassCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClass,
			url : kmapiHost + "km/relationontologyclassontologyclasses"
		});
window.RelationOntologyClassOntologyClassEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyclassentities",
	type : "RelationOntologyClassOntologyClassEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OutgoingOntologyClassEntity',
		relatedModel : 'OutgoingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'IncomingOntologyClassEntity',
		relatedModel : 'IncomingOntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	} ]

});

window.RelationOntologyClassOntologyClassEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyClassEntity,
			url : kmapiHost + "km/relationontologyclassontologyclassentities"
		});
window.RelationOntologyClassOntologyProperty = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologyproperties",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	} ]

});

window.RelationOntologyClassOntologyPropertyCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyProperty,
			url : kmapiHost + "km/relationontologyclassontologyproperties"
		});
window.RelationOntologyClassOntologyPropertyEntity = Master.extend({
	urlRoot : kmapiHost + "km/relationontologyclassontologypropertyentities",
	type : "RelationOntologyClassOntologyPropertyEntity",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]

});

window.RelationOntologyClassOntologyPropertyEntityCollection = MasterCollection
		.extend({
			model : RelationOntologyClassOntologyPropertyEntity,
			url : kmapiHost + "km/relationontologyclassontologypropertyentities"
		});
window.OntologyClassListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.OntologyPropertyListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete", "entityList", "addEntity"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});