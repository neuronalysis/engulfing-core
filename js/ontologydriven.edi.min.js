
window.DataService = Master.extend({
	urlRoot : apiHost + "edi/dataservices",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : "",
		"DataProvider" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataProvider',
		relatedModel : 'DataProvider'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataservices"
});

window.DataProvider = Master.extend({
	urlRoot : apiHost + "edi/dataproviders",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataProviderCollection = MasterCollection.extend({
	model : DataProvider,
	url : apiHost + "edi/dataproviders"
});
window.DataService = Master.extend({
	urlRoot : apiHost + "edi/dataservices",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : "",
		"DataProvider" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataProvider',
		relatedModel : 'DataProvider'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataservices"
});
window.DataServiceEntity = Master.extend({
	urlRoot : apiHost + "edi/dataserviceentities",
	
	defaults : {
		"id" : null,
		"key" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceEntityCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataserviceentities"
});
window.DataSource = Master.extend({
	urlRoot : apiHost + "edi/datasources",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataSourceCollection = MasterCollection.extend({
	model : DataSource,
	url : apiHost + "edi/datasources"
});
window.ImportProcess = Master.extend({
	urlRoot : apiHost + "edi/importprocesses",
	
	defaults : {
		"id" : null,
		"name" : "",
		"DataService" : null,
		"DataServiceEntity" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'DataServiceEntity',
		relatedModel : 'DataServiceEntity'
	}],
	hasParameters : function () {
		var ds = JSON.parse( this.get('DataService').get('schemaDefinition') );
		
		if (ds.parameters) {
			return true;
		} else {
			return false;
		}
	},
	start : function () {
		if (this.get('DataServiceEntity')) {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id,
					"internalKey" : this.get('DataServiceEntity').get('internalKey')
					}
				
			});
		} else {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id
					}
				
			});
		}
		
		service.fetch();
	}
});

window.ImportProcessCollection = MasterCollection.extend({
	model : ImportProcess,
	url : apiHost + "edi/importprocesses"
});
window.RelationDataServiceOntologyClass = Master.extend({
	urlRoot : apiHost + "edi/relationdataserviceontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]

});

window.RelationDataServiceOntologyClassCollection = MasterCollection
		.extend({
			model : RelationDataServiceOntologyClass,
			url : apiHost + "edi/relationdataserviceontologyclasses"
		});
window.Ressource = Master.extend({
	urlRoot : apiHost + "edi/ressources",
	type : "Ressource",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : ""
	}
});

window.RessourceCollection = MasterCollection.extend({
	model : Ressource,
	url : apiHost + "edi/ressources"
});
window.Schedule = Master.extend({
	urlRoot : apiHost + "edi/schedules",
	
	defaults : {
		"id" : null,
		"cronCommand" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'ImportProcess',
		relatedModel : 'ImportProcess'
	} ]
});

window.ScheduleCollection = MasterCollection.extend({
	model : Schedule,
	url : apiHost + "edi/schedules"
});

window.DataService = Master.extend({
	urlRoot : apiHost + "edi/dataservices",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : "",
		"DataProvider" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataProvider',
		relatedModel : 'DataProvider'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataservices"
});

window.DataProvider = Master.extend({
	urlRoot : apiHost + "edi/dataproviders",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataProviderCollection = MasterCollection.extend({
	model : DataProvider,
	url : apiHost + "edi/dataproviders"
});
window.DataService = Master.extend({
	urlRoot : apiHost + "edi/dataservices",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : "",
		"DataProvider" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataProvider',
		relatedModel : 'DataProvider'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataservices"
});
window.DataServiceEntity = Master.extend({
	urlRoot : apiHost + "edi/dataserviceentities",
	
	defaults : {
		"id" : null,
		"key" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceEntityCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataserviceentities"
});
window.DataSource = Master.extend({
	urlRoot : apiHost + "edi/datasources",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataSourceCollection = MasterCollection.extend({
	model : DataSource,
	url : apiHost + "edi/datasources"
});
window.ImportProcess = Master.extend({
	urlRoot : apiHost + "edi/importprocesses",
	
	defaults : {
		"id" : null,
		"name" : "",
		"DataService" : null,
		"DataServiceEntity" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'DataServiceEntity',
		relatedModel : 'DataServiceEntity'
	}],
	hasParameters : function () {
		var ds = JSON.parse( this.get('DataService').get('schemaDefinition') );
		
		if (ds.parameters) {
			return true;
		} else {
			return false;
		}
	},
	start : function () {
		if (this.get('DataServiceEntity')) {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id,
					"internalKey" : this.get('DataServiceEntity').get('internalKey')
					}
				
			});
		} else {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id
					}
				
			});
		}
		
		service.fetch();
	}
});

window.ImportProcessCollection = MasterCollection.extend({
	model : ImportProcess,
	url : apiHost + "edi/importprocesses"
});
window.RelationDataServiceOntologyClass = Master.extend({
	urlRoot : apiHost + "edi/relationdataserviceontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]

});

window.RelationDataServiceOntologyClassCollection = MasterCollection
		.extend({
			model : RelationDataServiceOntologyClass,
			url : apiHost + "edi/relationdataserviceontologyclasses"
		});
window.Ressource = Master.extend({
	urlRoot : apiHost + "edi/ressources",
	type : "Ressource",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : ""
	}
});

window.RessourceCollection = MasterCollection.extend({
	model : Ressource,
	url : apiHost + "edi/ressources"
});
window.Schedule = Master.extend({
	urlRoot : apiHost + "edi/schedules",
	
	defaults : {
		"id" : null,
		"cronCommand" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'ImportProcess',
		relatedModel : 'ImportProcess'
	} ]
});

window.ScheduleCollection = MasterCollection.extend({
	model : Schedule,
	url : apiHost + "edi/schedules"
});

window.DataService = Master.extend({
	urlRoot : apiHost + "edi/dataservices",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : "",
		"DataProvider" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataProvider',
		relatedModel : 'DataProvider'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataservices"
});

window.DataProvider = Master.extend({
	urlRoot : apiHost + "edi/dataproviders",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataProviderCollection = MasterCollection.extend({
	model : DataProvider,
	url : apiHost + "edi/dataproviders"
});
window.DataService = Master.extend({
	urlRoot : apiHost + "edi/dataservices",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : "",
		"DataProvider" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataProvider',
		relatedModel : 'DataProvider'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataservices"
});
window.DataServiceEntity = Master.extend({
	urlRoot : apiHost + "edi/dataserviceentities",
	
	defaults : {
		"id" : null,
		"key" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceEntityCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataserviceentities"
});
window.DataSource = Master.extend({
	urlRoot : apiHost + "edi/datasources",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataSourceCollection = MasterCollection.extend({
	model : DataSource,
	url : apiHost + "edi/datasources"
});
window.ImportProcess = Master.extend({
	urlRoot : apiHost + "edi/importprocesses",
	
	defaults : {
		"id" : null,
		"name" : "",
		"DataService" : null,
		"DataServiceEntity" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'DataServiceEntity',
		relatedModel : 'DataServiceEntity'
	}],
	start : function () {
		if (this.get('DataServiceEntity')) {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id,
					"internalKey" : this.get('DataServiceEntity').get('internalKey')
					}
				
			});
		} else {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id
					}
				
			});
		}
		
		service.fetch();
	}
});

window.ImportProcessCollection = MasterCollection.extend({
	model : ImportProcess,
	url : apiHost + "edi/importprocesses"
});
window.RelationDataServiceOntologyClass = Master.extend({
	urlRoot : apiHost + "edi/relationdataserviceontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]

});

window.RelationDataServiceOntologyClassCollection = MasterCollection
		.extend({
			model : RelationDataServiceOntologyClass,
			url : apiHost + "edi/relationdataserviceontologyclasses"
		});
window.Ressource = Master.extend({
	urlRoot : apiHost + "edi/ressources",
	type : "Ressource",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : ""
	}
});

window.RessourceCollection = MasterCollection.extend({
	model : Ressource,
	url : apiHost + "edi/ressources"
});
window.Schedule = Master.extend({
	urlRoot : apiHost + "edi/schedules",
	
	defaults : {
		"id" : null,
		"cronCommand" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'ImportProcess',
		relatedModel : 'ImportProcess'
	} ]
});

window.ScheduleCollection = MasterCollection.extend({
	model : Schedule,
	url : apiHost + "edi/schedules"
});

window.DataService = Master.extend({
	urlRoot : apiHost + "edi/dataservices",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : "",
		"DataProvider" : null,
		"OntologyClass" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataProvider',
		relatedModel : 'DataProvider'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataservices"
});
window.DataProvider = Master.extend({
	urlRoot : apiHost + "edi/dataproviders",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataProviderCollection = MasterCollection.extend({
	model : DataProvider,
	url : apiHost + "edi/dataproviders"
});
window.DataServiceEntity = Master.extend({
	urlRoot : apiHost + "edi/dataserviceentities",
	
	defaults : {
		"id" : null,
		"key" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceEntityCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataserviceentities"
});
window.DataSource = Master.extend({
	urlRoot : apiHost + "edi/datasources",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataSourceCollection = MasterCollection.extend({
	model : DataSource,
	url : apiHost + "edi/datasources"
});
window.ImportProcess = Master.extend({
	urlRoot : apiHost + "edi/importprocesses",
	
	defaults : {
		"id" : null,
		"name" : "",
		"DataService" : null,
		"DataServiceEntity" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'DataServiceEntity',
		relatedModel : 'DataServiceEntity'
	}],
	start : function () {
		if (this.get('DataServiceEntity')) {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id,
					"internalKey" : this.get('DataServiceEntity').get('internalKey')
					}
				
			});
		} else {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id
					}
				
			});
		}
		
		service.fetch();
	}
});

window.ImportProcessCollection = MasterCollection.extend({
	model : ImportProcess,
	url : apiHost + "edi/importprocesses"
});
window.RelationDataServiceOntologyClass = Master.extend({
	urlRoot : apiHost + "edi/relationdataserviceontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]

});

window.RelationDataServiceOntologyClassCollection = MasterCollection
		.extend({
			model : RelationDataServiceOntologyClass,
			url : apiHost + "edi/relationdataserviceontologyclasses"
		});
window.Ressource = Master.extend({
	urlRoot : apiHost + "edi/ressources",
	type : "Ressource",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : ""
	}
});

window.RessourceCollection = MasterCollection.extend({
	model : Ressource,
	url : apiHost + "edi/ressources"
});
window.Schedule = Master.extend({
	urlRoot : apiHost + "edi/schedules",
	
	defaults : {
		"id" : null,
		"cronCommand" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'ImportProcess',
		relatedModel : 'ImportProcess'
	} ]
});

window.ScheduleCollection = MasterCollection.extend({
	model : Schedule,
	url : apiHost + "edi/schedules"
});
window.ImportProcessListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["start"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.ImportProcessListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["start"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.DataProvider = Master.extend({
	urlRoot : apiHost + "edi/dataproviders",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataProviderCollection = MasterCollection.extend({
	model : DataProvider,
	url : apiHost + "edi/dataproviders"
});
window.DataServiceEntity = Master.extend({
	urlRoot : apiHost + "edi/dataserviceentities",
	
	defaults : {
		"id" : null,
		"key" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceEntityCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataserviceentities"
});
window.DataSource = Master.extend({
	urlRoot : apiHost + "edi/datasources",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataSourceCollection = MasterCollection.extend({
	model : DataSource,
	url : apiHost + "edi/datasources"
});
window.ImportProcess = Master.extend({
	urlRoot : apiHost + "edi/importprocesses",
	
	defaults : {
		"id" : null,
		"name" : "",
		"DataService" : null,
		"DataServiceEntity" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'DataServiceEntity',
		relatedModel : 'DataServiceEntity'
	}],
	hasParameters : function () {
		var ds = JSON.parse( this.get('DataService').get('schemaDefinition') );
		
		if (ds.parameters) {
			return true;
		} else {
			return false;
		}
	},
	start : function () {
		if (this.get('DataServiceEntity')) {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id,
					"internalKey" : this.get('DataServiceEntity').get('internalKey')
					}
				
			});
		} else {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id
					}
				
			});
		}
		
		service.fetch();
	}
});

window.ImportProcessCollection = MasterCollection.extend({
	model : ImportProcess,
	url : apiHost + "edi/importprocesses"
});
window.RelationDataServiceOntologyClass = Master.extend({
	urlRoot : apiHost + "edi/relationdataserviceontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]

});

window.RelationDataServiceOntologyClassCollection = MasterCollection
		.extend({
			model : RelationDataServiceOntologyClass,
			url : apiHost + "edi/relationdataserviceontologyclasses"
		});
window.Ressource = Master.extend({
	urlRoot : apiHost + "edi/ressources",
	type : "Ressource",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : ""
	}
});

window.RessourceCollection = MasterCollection.extend({
	model : Ressource,
	url : apiHost + "edi/ressources"
});
window.Schedule = Master.extend({
	urlRoot : apiHost + "edi/schedules",
	
	defaults : {
		"id" : null,
		"cronCommand" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'ImportProcess',
		relatedModel : 'ImportProcess'
	} ]
});

window.ScheduleCollection = MasterCollection.extend({
	model : Schedule,
	url : apiHost + "edi/schedules"
});
window.ImportProcessListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["start"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.ImportProcessListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["start"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.DataProvider = Master.extend({
	urlRoot : apiHost + "edi/dataproviders",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataProviderCollection = MasterCollection.extend({
	model : DataProvider,
	url : apiHost + "edi/dataproviders"
});
window.DataServiceEntity = Master.extend({
	urlRoot : apiHost + "edi/dataserviceentities",
	
	defaults : {
		"id" : null,
		"key" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceEntityCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataserviceentities"
});
window.DataSource = Master.extend({
	urlRoot : apiHost + "edi/datasources",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataSourceCollection = MasterCollection.extend({
	model : DataSource,
	url : apiHost + "edi/datasources"
});
window.ImportProcess = Master.extend({
	urlRoot : apiHost + "edi/importprocesses",
	
	defaults : {
		"id" : null,
		"name" : "",
		"DataService" : null,
		"DataServiceEntity" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'DataServiceEntity',
		relatedModel : 'DataServiceEntity'
	}],
	hasParameters : function () {
		var ds = JSON.parse( this.get('DataService').get('schemaDefinition') );
		
		if (ds.parameters) {
			return true;
		} else {
			return false;
		}
	},
	start : function () {
		if (this.get('DataServiceEntity')) {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id,
					"internalKey" : this.get('DataServiceEntity').get('internalKey')
					}
				
			});
		} else {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id
					}
				
			});
		}
		
		service.fetch();
	}
});

window.ImportProcessCollection = MasterCollection.extend({
	model : ImportProcess,
	url : apiHost + "edi/importprocesses"
});
window.RelationDataServiceOntologyClass = Master.extend({
	urlRoot : apiHost + "edi/relationdataserviceontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]

});

window.RelationDataServiceOntologyClassCollection = MasterCollection
		.extend({
			model : RelationDataServiceOntologyClass,
			url : apiHost + "edi/relationdataserviceontologyclasses"
		});
window.Ressource = Master.extend({
	urlRoot : apiHost + "edi/ressources",
	type : "Ressource",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : ""
	}
});

window.RessourceCollection = MasterCollection.extend({
	model : Ressource,
	url : apiHost + "edi/ressources"
});
window.Schedule = Master.extend({
	urlRoot : apiHost + "edi/schedules",
	
	defaults : {
		"id" : null,
		"cronCommand" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'ImportProcess',
		relatedModel : 'ImportProcess'
	} ]
});

window.ScheduleCollection = MasterCollection.extend({
	model : Schedule,
	url : apiHost + "edi/schedules"
});
window.ImportProcessListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["start"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.ImportProcessListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["start"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});
window.DataProvider = Master.extend({
	urlRoot : apiHost + "edi/dataproviders",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataProviderCollection = MasterCollection.extend({
	model : DataProvider,
	url : apiHost + "edi/dataproviders"
});
window.DataServiceEntity = Master.extend({
	urlRoot : apiHost + "edi/dataserviceentities",
	
	defaults : {
		"id" : null,
		"key" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]
});

window.DataServiceEntityCollection = MasterCollection.extend({
	model : DataService,
	url : apiHost + "edi/dataserviceentities"
});
window.DataSource = Master.extend({
	urlRoot : apiHost + "edi/datasources",
	
	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.DataSourceCollection = MasterCollection.extend({
	model : DataSource,
	url : apiHost + "edi/datasources"
});
window.ImportProcess = Master.extend({
	urlRoot : apiHost + "edi/importprocesses",
	
	defaults : {
		"id" : null,
		"name" : "",
		"DataService" : null,
		"DataServiceEntity" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'DataServiceEntity',
		relatedModel : 'DataServiceEntity'
	}],
	hasParameters : function () {
		var ds = JSON.parse( this.get('DataService').get('schemaDefinition') );
		
		if (ds.parameters) {
			return true;
		} else {
			return false;
		}
	},
	start : function () {
		if (this.get('DataServiceEntity')) {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id,
					"internalKey" : this.get('DataServiceEntity').get('internalKey')
					}
				
			});
		} else {
			var service = new Service({
				ontology : "edi",
				ressource : "import",
				parameters : {
					"importprocessID" : this.id
					}
				
			});
		}
		
		service.fetch();
	}
});

window.ImportProcessCollection = MasterCollection.extend({
	model : ImportProcess,
	url : apiHost + "edi/importprocesses"
});
window.RelationDataServiceOntologyClass = Master.extend({
	urlRoot : apiHost + "edi/relationdataserviceontologyclasses",

	defaults : {
		"id" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'DataService',
		relatedModel : 'DataService'
	},
	{
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	} ]

});

window.RelationDataServiceOntologyClassCollection = MasterCollection
		.extend({
			model : RelationDataServiceOntologyClass,
			url : apiHost + "edi/relationdataserviceontologyclasses"
		});
window.Ressource = Master.extend({
	urlRoot : apiHost + "edi/ressources",
	type : "Ressource",
	
	defaults : {
		"id" : null,
		"name" : "",
		"url" : "",
		"schemaDefinition" : ""
	}
});

window.RessourceCollection = MasterCollection.extend({
	model : Ressource,
	url : apiHost + "edi/ressources"
});
window.Schedule = Master.extend({
	urlRoot : apiHost + "edi/schedules",
	
	defaults : {
		"id" : null,
		"cronCommand" : ""
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'ImportProcess',
		relatedModel : 'ImportProcess'
	} ]
});

window.ScheduleCollection = MasterCollection.extend({
	model : Schedule,
	url : apiHost + "edi/schedules"
});
window.ImportProcessListView = ObjectListView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.actions.push({name: "start"});
		
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["start"]
			})
		});
		
		this.buttonView = new ButtonView({id: "btn_add"});
	}
});