
tpl = {

	// Hash of preloaded templates for the app
	templates : {},

	
	// Recursively pre-load all the templates for the app.
	// This implementation should be changed in a production environment. All
	// the template files should be
	// concatenated in a single file.
	loadTemplates : function(names, fromBase, callback) {

		var that = this;
		
		var loadTemplate = function(index) {
			
			var name = names[index];
			var desc = '';
			var subDomain = '';
			
			if (fromBase) {
				if (name.indexOf("../../") > -1) {
					name = name.replace("../../", "");
					
					$.get(engulfingBase + 'engulfing-core/templates/' + name + '.html', function(data) {
						that.templates[name] = data;
						index++;
						if (index < names.length) {
							loadTemplate(index);
						} else {
							callback();
						}
					});
				} else {
					name = name.replace("../../", "");
					
					if (window.location.href.replace(engulfingBase).match(new RegExp("/", "g")).length >= 1) {
						subDomain = window.location.href.replace(engulfingBase, "").split("/")[0];
						
					}
					$.get(engulfingBase + subDomain + '/templates/' + name + '.html', function(data) {
						that.templates[name] = data;
						index++;
						if (index < names.length) {
							loadTemplate(index);
						} else {
							callback();
						}
					});
				}
			
		
			} else {
				if (name.indexOf("../../") > -1) {
					desc = '../../';
					name = name.replace("../../", "");
				} else {
					if (name.indexOf("../") > -1) {
						desc = '../';
						name = name.replace("../", "");
					}
				}
				
				$.get(desc + 'templates/' + name + '.html', function(data) {
					that.templates[name] = data;
					index++;
					if (index < names.length) {
						loadTemplate(index);
					} else {
						callback();
					}
				});
			}
			
					
		};

		if (names.length > 0) loadTemplate(0);
	},

	/*loadTemplates : function(names, fromBase, callback) {
		var that = this;
		var desc = '';
		var name = '';
		
		console.log("base: " + engulfingBase);
		
		$.get(engulfingBase + 'templates/underscore.html', function(data) {
			var elements = $(data);
			
			for (var i = 0; i < names.length; i++) {
				if (names[i].indexOf("../../") > -1) {
					desc = '../../';
					name = names[i].replace("../../", "");
				} else {
					if (name.indexOf("../") > -1) {
						desc = '../';
						name = names[i].replace("../", "");
					}
				}
				
				var pickedElement = $.grep(elements, function(e){ 
					return e.id == name + '.html'; 
				});
				
				if (pickedElement.length === 1) {
					that.templates[name] =  $(pickedElement[0]).html();
				}
				
				if (i==names.length-1) {
					callback();
				}
			}
			
		});
		
		if (names.length <= 1) {
			this.loadTemplatesRecursively(names, fromBase, callback);
		}
		
	},*/
	// Get template by name from hash of preloaded templates
	get : function(name) {
		return this.templates[name];
	}

};
select2ConfigMin = {
	objectName : "",
	allowClear: true,
	placeholder : "Search",
	width : "180px",
	
	get : function(options, object_name) {
		this.objectName = object_name;
		
		this.placeholder = object_name.charAt(0).toUpperCase() + object_name.slice(1);
		
		this.data = options;
		
		return this;
	},
	initSelection : function(item, callback) {
		var object = $(item).val();
		
		if(typeof object.models  === 'undefined') {
			if(!object.hasOwnProperty('language')){
				if(typeof object.name  === 'undefined') {
					if (object.get('name') == '') {
						var nameById = '';
						
						for (var i=0; i < object.enumeration.length; i++) {
							if (object.enumeration[i].id == object.id) nameById = object.enumeration[i].text;
						}
						
						var data = {
								id : object.id,
								text : nameById
							};
					} else {
						var data = {
								id : object.id,
								text : object.get('name')
							};
					}
				} else {
					var data = {
							id : object.id,
							text : object.name
						};
				}
				
			} else {
				if(typeof object.get('language')  === 'undefined') {
					var data = {
							id : object.id,
							text : object.get('name')
						};
				} else {
					var data = {
							id : object.id,
							text : object.get('name') + " [" + object.get('language') + "]"
						};
				}
			}
			
			
		} else {
		}
			
		
		callback(data);
	}
};
select2Config = {
	objectName : "",
	allowClear: true,
	placeholder : "Search",
	width : "100%",
	minimumInputLength : 2,
	ajax : { // instead of writing the function to execute the request we use
				// Select2's convenient helper
		url : "",
		dataType : 'jsonp',
		quietMillis : 100,
		data : function(term, page) {
			return {
				query : term, // search term
			// page_limit: 10
			};
		},
		results : function(data, page) { // parse the results into the format
											// expected by Select2.
			// since we are using custom formatting functions we do not need to
			// alter remote JSON data
			return {
				results : data
			};
		}
	},

	createSearchChoice : function(term, data) {
		if ($(data).filter(function() {
			return this.text.localeCompare(term) === 0;
		}).length === 0) {
			return {
				id : -99,
				text : term
			};
		}
	},
	initSelection : function(item, callback) {
		var object = $(item).val();
		
		if(typeof object.models  === 'undefined') {
			if(!object.hasOwnProperty('language')){
				if(typeof object.name  === 'undefined') {
					var data = {
							id : object.id,
							text : object.get('name')
						};
				} else {
					var data = {
							id : object.id,
							text : object.name
						};
				}
				
			} else {
				if(typeof object.get('language')  === 'undefined') {
					var data = {
							id : object.id,
							text : object.get('name')
						};
				} else {
					var data = {
							id : object.id,
							text : object.get('name') + " [" + object.get('language') + "]"
						};
				}
			}
			
			
		} else {
			var data = [];
			
			for (var i = 0; i < object.models.length; i++) {
				if(typeof object.models[i].get('language')  === 'undefined') {
					data.push({
						id : object.models[i].id,
						text :object.models[i].get('name')
					})
				} else {
					data.push({
						id : object.models[i].id,
						text :object.models[i].get('name') + " [" + object.models[i].get('language') + "]"
					})
				}
				
			}
			
		}
			
		
		callback(data);
	},
	initConfig : function () {
		delete this.tags;
		this.multiple = false;
		delete this.tokenSeparators;
		
		return false;
	},
	get : function(url, object_name) {
		this.initConfig();
		
		this.objectName = object_name;
		this.ajax.url = url;

		this.placeholder = object_name.charAt(0).toUpperCase() + object_name.slice(1);
		
		return this;
	},
	getTags : function(url, object_name, tags) {
		this.initConfig();
		
		this.objectName = object_name;
		this.ajax.url = url;
		
		this.placeholder = object_name.charAt(0).toUpperCase() + object_name.slice(1);
		
		if (tags) {
			this.tags = tags;
			this.multiple = true;
			this.tokenSeparators = [",", " "];
			
		}
		
		
		return this;
	},

	// formatSelection: movieFormatSelection, // omitted for brevity, see the
	// source of this page
	dropdownCssClass : "bigdrop", // apply css that makes the dropdown taller
	escapeMarkup : function(m) {
		return m;
	} // we do not want to escape markup since we are displaying html in
		// results
};
select2QSConfig = {
		objectName : "",
		allowClear: true,
		placeholder : "Search",
		width : "250px",
		minimumInputLength : 3,
		ajax : { // instead of writing the function to execute the request we use
					// Select2's convenient helper
			url : "",
			dataType : 'jsonp',
			quietMillis : 100,
			data : function(term, page) {
				return {
					query : term, // search term
				// page_limit: 10
				};
			},
			results : function(data, page) { // parse the results into the format
												// expected by Select2.
				// since we are using custom formatting functions we do not need to
				// alter remote JSON data
				return {
					results : data
				};
			}
		},

		createSearchChoice : function(term, data) {
			if ($(data).filter(function() {
				return this.text.localeCompare(term) === 0;
			}).length === 0) {
				return {
					id : -99,
					text : term
				};
			}
		},
		initSelection : function(item, callback) {
			var object = $(item).val();
			
			if(typeof object.models  === 'undefined') {
				if(!object.hasOwnProperty('language')){
					if(typeof object.name  === 'undefined') {
						var data = {
								id : object.id,
								text : object.get('name')
							};
					} else {
						var data = {
								id : object.id,
								text : object.name
							};
					}
					
				} else {
					if(typeof object.get('language')  === 'undefined') {
						var data = {
								id : object.id,
								text : object.get('name')
							};
					} else {
						var data = {
								id : object.id,
								text : object.get('name') + " [" + object.get('language') + "]"
							};
					}
				}
				
				
			} else {
				var data = [];
				
				for (var i = 0; i < object.models.length; i++) {
					if(typeof object.models[i].get('language')  === 'undefined') {
						data.push({
							id : object.models[i].id,
							text :object.models[i].get('name')
						})
					} else {
						data.push({
							id : object.models[i].id,
							text :object.models[i].get('name') + " [" + object.models[i].get('language') + "]"
						})
					}
					
				}
				
			}
				
			
			callback(data);
		},
		initConfig : function () {
			delete this.tags;
			this.multiple = false;
			delete this.tokenSeparators;
			
			return false;
		},
		get : function(url, object_name) {
			this.initConfig();
			
			this.objectName = object_name;
			this.ajax.url = url;

			this.placeholder = object_name.charAt(0).toUpperCase() + object_name.slice(1);
			
			return this;
		},
		getTags : function(url, object_name, tags) {
			this.initConfig();
			
			this.objectName = object_name;
			this.ajax.url = url;
			
			this.placeholder = object_name.charAt(0).toUpperCase() + object_name.slice(1);
			
			if (tags) {
				this.tags = tags;
				this.multiple = true;
				this.tokenSeparators = [",", " "];
				
			}
			
			
			return this;
		},

		// formatSelection: movieFormatSelection, // omitted for brevity, see the
		// source of this page
		dropdownCssClass : "bigdrop", // apply css that makes the dropdown taller
		escapeMarkup : function(m) {
			return m;
		} // we do not want to escape markup since we are displaying html in
			// results
	};
function getBaseTemplatesRoot() {
	var root = "";
	
	return root;
}
function loadMaps() {
	// Create Google map instance
	var places = new Backbone.GoogleMaps.LocationCollection([
	    {
	        title: "Walker Art Center",
	        lat: 44.9796635,
	        lng: -93.2748776
	    },
	    {
	        title: "Science Museum of Minnesota",
	        lat: 44.9429618,
	        lng: -93.0981016
	    }
	]);

	var map = new google.maps.Map($('#TestLocation')[0], {
	    center: new google.maps.LatLng(44.9796635, -93.2748776),
	    zoom: 12,
	    mapTypeId: google.maps.MapTypeId.ROADMAP
	});

	// Render Markers
	var markerCollectionView = new Backbone.GoogleMaps.MarkerCollectionView({
	    collection: places,
	    map: map
	});
	markerCollectionView.render();
}
var referrer = document.referrer;
//console.log("href: " + window.location.href + "; referrer: " + referrer);
if (window.location.href.indexOf("localhost") === -1) {
	if (referrer.indexOf("generated") === -1) {
		var kmapiHost = "http://www.ontologydriven.com/api/";
		var apiHost = "http://www.ontologydriven.com/api/";
	} else {
		var kmapiHost = "http://www.ontologydriven.com/api/";
		var apiHost = "http://www.ontologydriven.com/generated/api/";
	}
	
	var odBase = "http://www.ontologydriven.com/";
	var engulfingBase = "http://www.engulfing.com/";
	var neuroBase = "http://www.neuronalysis.com/";
} else {
	if (referrer.indexOf("generated") === -1) {
		var kmapiHost = "http://localhost.ontologydriven/api/";
		var apiHost = "http://localhost.ontologydriven/api/";
	} else {
		var kmapiHost = "http://localhost.ontologydriven/api/";
		var apiHost = "http://localhost.generated/api/";
	}
	
	var odBase = "http://localhost.ontologydriven/";
	var engulfingBase = "http://localhost.engulfing/";
	var neuroBase = "http://localhost.generated/neuronalysis/";
	
	
}


//var apiHost = "http://datamart.services/api/";
window.Master = Backbone.RelationalModel.extend({
	accessMode : "read",
	detailed : null,
	isWatched : null,
	
	fetch: function (options) {
		if (typeof options !== 'undefined') {
			if (options.detailed) {
	            this.url = this.urlRoot + "/" + this.id + "/detailed";
	        }
		}
		
		
		/*var self = this;
		
		$.when(watchlistPromise).then(function() {
			self.isWatched = user.get('Watchlist').hasItem(this);
		});*/
		
		
		/*
		if (user.get('Watchlist')) {
			for(item in user.get('Watchlist').get('WatchlistItems')) {
				if (this.type == "OntologyClass") {
					
				}
			}
		}*/
		

    	return  Backbone.RelationalModel.prototype.fetch.call(this, options);
    },
    getUrl: function () {
    	var url = '';
    	
    	url += odBase + 'wiki/articles#' + this.get('name');
    	
    	return url;
    },
    getRelatedObjects: function () {
    	if (this.isConcrete()) {
    		if (this.type !== "ReleasePublication") {
    			var relations = this.getRelations();
    		}
    	
    		for (var i=0; i < relations.length; i++) {
    			if (typeof relations[i].related.type === 'undefined') {
    				relations[i].related.type = relations[i].options.relatedModel;
    			}
    		}

    	} else {
    		var relations = this.get('OntologyClass').get('RelationOntologyClassOntologyClasses');

    		for (var i=0; i < relations.length; i++) {
    			if (relations.models[i].get('OntologyRelationType').get('name') !== "extends") {
    				
    				var related = new Object();
    				related.type = relations.models[i].get('IncomingOntologyClass').get('name');
    				relations.models[i].related = related;
    			}
    		}
    		
    		relations = relations.models;

    	}
    	
    	return relations;
    },
    getEntities: function (groupName) {
    	if (this.isConcrete()) {
    		if (typeof this.get(groupName) === 'undefined') {
    			var entities = this.get(getPlural(groupName)).models;
    		} else {
    			var entities = this.get(groupName).models;
    		}
    	} else {
    		var entities = this.getClassEntities(groupName);
    	}
    	
    	return entities;
    },
    getRelatedModel: function () {
    	return this.instance;
    },
    isEmpty: function () {
    	if (this.isNew()) {
    		if (!this.get('name') && this.type === "OntologyClassEntity") return true;
    		if (this.get('name') === '') return true;
    	}
    	
    	return false;
    },
    isProtected: function (fieldName) {
    	if (fieldName === 'Lexemes' || fieldName === 'Ressource' || fieldName === 'isPersistedConcrete') {
    		if (!isAuthorizedField(this.objectName, fieldName, Cookie.get("UserRoleID"))) {
    			return true;
    		}
    	}
    	
    	return false;
    },
    isFieldGroup: function () {
    	var relOCOC_Classes = this.get('RelationOntologyClassOntologyClasses');
    	if (relOCOC_Classes.length > 1) {
			return true;
    	}
    	
    	var relOCOC_Properties = this.get('RelationOntologyClassOntologyProperties');
		if (relOCOC_Properties.length > 1) {
			var nonIdentifiers = 0;
			
			for (var i=0; i < relOCOC_Properties.length; i++) {
				if (relOCOC_Properties.models[i].get('OntologyProperty').get('isIdentifier') == false) {
					nonIdentifiers++;
				}
			}
			
			if (nonIdentifiers > 1) {
				return true;
			}
		} else {
			if (relOCOC_Properties.length == 1) {
				if (relOCOC_Properties.models[0].get('OntologyProperty').get('name') !== "name") {
					return true;
				}
			}
			
		}
		
		return false;
    },
    isConcrete: function () {
    	if (this.type === "OntologyClassEntity" && this.get('OntologyClass')) {
    		return false;
    	}
    	
    	return true;
    },
    getFieldGroups: function () {
    	var fieldGroups = [];
    	
    	fieldGroups.push({"name" : "Dashboard", "fieldViews" : []} );
    	
    	if (this.isConcrete()) {
    		if (this.__proto__.relations.length > 0) {
    			for (var i=0; i < this.__proto__.relations.length; i++) {
    				if (this.__proto__.relations[i].key === getPlural(this.__proto__.relations[i].relatedModel) && this.__proto__.relations[i].key !== "Lexemes") {
    					var fieldGroupName = this.__proto__.relations[i].relatedModel;
        				
        				fieldGroups.push({"name" : getPlural(fieldGroupName), "fieldViews" : []} );
    				}
    			}
    		} else {
    			
    		}
    	} else {
    		var relations_ococ = this.get('OntologyClass').get('RelationOntologyClassOntologyClasses');
        	
    		for (var i=0; i < relations_ococ.length; i++) {
    			if (relations_ococ.models[i].get('IncomingOntologyClass').isFieldGroup()) {
    				if (relations_ococ.models[i].get('OntologyRelationType').get('name') !== "extends" && relations_ococ.models[i].get('OntologyRelationType').get('name') !== "hasMany") {
        				var relOCOC_Properties = relations_ococ.models[i].get('IncomingOntologyClass').get('RelationOntologyClassOntologyProperties');
        				if (relOCOC_Properties.length > 1 || relOCOC_Properties.models[0].get('OntologyProperty').get('name') !== "name") {
        					var fieldGroupName = relations_ococ.models[i].get('IncomingOntologyClass').get('name');
        					
        					
        					fieldGroups.push({"name" : fieldGroupName, "fieldViews" : []} );
        				}
        			} else if (relations_ococ.models[i].get('OntologyRelationType').get('name') === "hasMany") {
        				var fieldGroupName = relations_ococ.models[i].get('IncomingOntologyClass').get('name');
        				
        				
        				fieldGroups.push({"name" : getPlural(fieldGroupName), "fieldViews" : []} );
        			}
				}
    		}
    	}
    	
    	
		return fieldGroups;
    },
	boundOntologyClass : null,

    bindOntologyClass : function(ontologyClass) {
    	var actions = [];
    	
    	var relsOCOC = ontologyClass.RelationOntologyClassOntologyClasses
    	for (var i = 0; i < relsOCOC.length; i++) {
    		if (relsOCOC[i].OntologyRelationType.name == "hasMany") {
    			if (relsOCOC[i].IncomingOntologyClass.name == "IndicatorObservation") {
    				this.boundOntologyClass = relsOCOC[i].IncomingOntologyClass;
    				//actions.push(this.model.prototype.relations[i].relatedModel);
    			} else if (relsOCOC[i].IncomingOntologyClass.name == "IndexObservation") {
    				this.boundOntologyClass = relsOCOC[i].IncomingOntologyClass;
    			}
    		}
    		
    	}
	},
	watch : function() {
		var watchlist = user.get('Watchlist');
		
		var watchlistitem = WatchlistItem.findOrCreate({
			Watchlist : Watchlist.findOrCreate({id: user.get('Watchlist').id}),
			OntologyClass : OntologyClass.findOrCreate({id: (this.type == "OntologyClass" ? 174 : this.get('OntologyClass').id)}),
			Entity : Entity.findOrCreate({id: (this.type == "OntologyClass" ? this.id : this.id)})
		});
		
		watchlistitemPromise = watchlistitem.save();

		$.when(watchlistitemPromise).then(function() {
			watchlist.get('WatchlistItems').add(watchlistitem);
			
			this.isWatched = true;
		});
	},
	ignore : function() {
		var watchlist = user.get('Watchlist');
		
		for(var i=0; i<watchlist.get('WatchlistItems').length; i++) {
			if (this.type == "OntologyClass") {
				if (watchlist.get('WatchlistItems').models[i].get('Entity')) {
					if ((parseInt(this.id) === parseInt(watchlist.get('WatchlistItems').models[i].get('Entity').id))) {
						watchlist.get('WatchlistItems').models[i].destroy({ dataType: "text", success: function(model, response) {
							watchlist.get('WatchlistItems').remove(model);
							
							this.isWatched = false;
				    	}});
					}
				} else {
					if (parseInt(this.id) === parseInt(watchlist.get('WatchlistItems').models[i].get('entityID'))) {
						watchlist.get('WatchlistItems').models[i].destroy({ dataType: "text", success: function(model, response) {
							watchlist.get('WatchlistItems').remove(model);
							
							this.isWatched = false;
				    	}});
					}
				}
			} else {
				if (watchlist.get('WatchlistItems').models[i].get('OntologyClass')) {
					if (parseInt(this.get('OntologyClass').id) === parseInt(watchlist.get('WatchlistItems').models[i].get('OntologyClass').id) && parseInt(this.id) === parseInt(watchlist.get('WatchlistItems').models[i].get('Entity').id)) {
						watchlist.get('WatchlistItems').models[i].destroy({ dataType: "text", success: function(model, response) {
							watchlist.get('WatchlistItems').remove(model);
							
							this.isWatched = false;
				    	}});
					}
				} else {
					if (parseInt(this.get('OntologyClass').id) === parseInt(watchlist.get('WatchlistItems').models[i].get('ontologyClassID')) && parseInt(this.id) === parseInt(watchlist.get('WatchlistItems').models[i].get('entityID'))) {
						watchlist.get('WatchlistItems').models[i].destroy({ dataType: "text", success: function(model, response) {
							watchlist.get('WatchlistItems').remove(model);
							
							this.isWatched = false;
				    	}});
					}
				}
			}
			
		}
	}
	    
	    
});

window.MasterCollection = Backbone.PageableCollection.extend({
	state : {
		pageSize : 15
	},
	fetch: function (options) {
		if (typeof options !== 'undefined') {
			if (options.OntologyClass) {
				this.OntologyClass = options.OntologyClass;
				
				this.url += "?ontologyClassID=" + this.OntologyClass.id;
			}
			if (options.internalKey) {
				this.url += "&internalKey=" + options.internalKey;
			}
			if (options.relatedOntologyClass) {
				this.url += "&relatedOntologyClassID=" + options.relatedOntologyClass.id;
			}
		}
			
    	return Backbone.PageableCollection.prototype.fetch.call(this, options)
    },
    parseState: function (resp, queryParams, state, options) {
      return {totalRecords: resp.total_count};
    },

    parseRecords: function (resp, options) {
      return resp.items;
    },
    getFieldName : function() {
		return getPlural(this.model.prototype.relations[1].relatedModel);
	},
    getModelAttributes : function() {
    	var attributes = [];
    	
    	for (var i = 0; i < this.model.prototype.relations.length; i++) {
    		attributes.push(this.model.prototype.relations[i].relatedModel);
    	}
    	
		return attributes;
	},
	getString : function() {
		var collectionString = "";
		
		for (var i = 0; i < this.models.length; i++) {
			if (i > 0) {
				collectionString += " " + this.models[i].get('name');
			} else {
				collectionString += this.models[i].get('name');
			}
		}
		
		return collectionString;
	}
});

window.Observation = Master.extend({
	
});
window.ObservationCollection = MasterCollection.extend({
	model : Observation,
	
	getLast : function() {
		return this.models[this.models.length - 1];
	}
});
window.User = Master.extend({
	urlRoot : apiHost + "authentication/users",

	defaults : {
		"id" : null,
		"name" : "",
		"password" : "",
		"eMail" : "",
		"Language" : null,
		"Role" : null,
		"birthDate" : null,
		"Watchlist" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Language',
		relatedModel : 'Language'
	}, {
		type : Backbone.HasOne,
		key : 'Role',
		relatedModel : 'Role'
	},
	{
		type : Backbone.HasOne,
		key : 'Watchlist',
		relatedModel : 'Watchlist'
	}]
});

window.UserCollection = MasterCollection.extend({
	model : User,
	url : apiHost + "authentication/users"
});

window.Language = Backbone.RelationalModel.extend({
	type : "Language",
	defaults : {
		"id" : null,
		"isoCode" : "",
		"name" : ""
	},
	enumeration : [ {
		id : "0",
		text : "English"
	}, {
		id : "1",
		text : "German"
	} ]
});
window.Owner = User.extend({
	
});
window.Content = Master.extend({
	urlRoot : kmapiHost + "web/contents",
	
	defaults : {
		"ontology" : null,
		"ressource" : null
	}
});

window.ContentCollection = MasterCollection.extend({
	urlRoot : kmapiHost + "web/contents",
	model : Content
});
var accessMode;
var user;
if (!Cookie.get("UserRoleID")) {
	$("#referer").val(window.location);
} else {
	var url = $("#signout").attr("href");
	$("#signout").attr("href", url + "?refererURL=" + window.location)
}
var BaseRouter = Backbone.Router.extend({
	objectName : null,

	activeView : null,
	
	initialize : function() {
		this.route("", "objectList");
		this.route(":id", "singleObject");
		this.route("new", "newObject");
		this.route(":id/entities", "entityList");
		this.route(":id/entities/new", "newEntity");
		this.route(":id/entities/#:entityID", "EntityDetails");
		this.route(":id/entities/import", "entityImport");
		this.route("housekeeping", "housekeeping");
	},
	isLoginFailure : function() {
		if (window.location.href.indexOf('login=failed') !== -1) {
			return true;
		}
		
		return false;
	},
	isAuthorized : function(routeType) {
		var roleID = Cookie.get("UserRoleID");
		
		$('#alerts').html('');
		/*var routeType;
		var caller = arguments.callee.caller;
		
		if (callerName === "objectList") {
			routeType = "list";
		}*/
		
		if (objects[this.objectName] !== undefined) {
			if (objects[this.objectName][roleID] !== undefined) {
				if(typeof(objects[this.objectName][roleID]) === "boolean"){
					if (objects[this.objectName][roleID]) {
						return true;
					}
				} else {
					if (objects[this.objectName][roleID][routeType]  !== undefined) {
						return true;
					}
				}
			} else if (objects[this.objectName][99] !== undefined) {
				return true;
			}
			
		} else {
			return true;
		}
		
		if (this.isLoginFailure()) {
			var alert_msg = '<div class="alert alert-danger">'+
			'<br/>' + 'Login failed.'+
			'<br/><br/>' + 'Please try again with your correct credentials.'+
			'<br/>' + 'If you don´t remember your credentials go to <a href="' + odBase + 'usermanagement/recovery">' + 'Password Recovery'+ '</a>.' +
			'<br/><br/>' + 'In case you´re not registered yet, you might want to <a href="' + odBase + 'usermanagement/register">' + 'Sign Up'+ '</a> here.' +
	    	'</div>';
		} else {
			var alert_msg = '<div class="alert alert-warning">'+
			'<br/>Access not granted.'+
			'<br/><br/>' + 'Please login to access this content.' +
			'<br/>' + 'If you don´t remember your credentials go to <a href="' + odBase + 'usermanagement/recovery">' + 'Password Recovery'+ '</a>.' +
			'<br/><br/>' + 'In case you´re not registered yet, you might want to <a href="' + odBase + 'usermanagement/register">' + 'Sign Up'+ '</a> here.' +
	    	'</div>';
		}
		
		
		$('#alerts').html(alert_msg);
		
		return false;
	},
	isWatchedObject : function (object, watchlist) {
		var watchlistItems = watchlist.get('WatchlistItems');
		
		var item;
		for(var i=0; i<watchlistItems.length; i++) {
			if (object.get('OntologyClass')) {
				if (parseInt(object.get('OntologyClass').id) === parseInt(watchlistItems.models[i].get('ontologyClassID')) && parseInt(object.id) === parseInt(watchlistItems.models[i].get('entityID'))) {
					return true;
				}
			} else if (object.type === "OntologyClass") {
				if (parseInt(object.id) === parseInt(watchlistItems.models[i].get('entityID'))) {
					return true;
				}
					
			}
			
		}
		
		return false;
	},
	objectList : function() {
		if (this.isAuthorized('list')) {
			var objectList = new window[this.objectName + "Collection"]();
			
			var objectlistView = new ObjectListView({el : $('#content'),
				collection : objectList, objectName : this.objectName});
		
			objectlistView.render();
		}
	},
	entityList : function() {
		if (this.isAuthorized('list')) {
			var entityList = new window[this.objectName + "Entity" + "Collection"]();
			
			var entitylistView = new EntityListView({el : $('#content'),
				collection : entityList, objectName : this.objectName});
		
			entitylistView.render();
		}
	},
	singleObject : function(id) {
		if (this.isAuthorized('single')) {
			var object = window[this.objectName].findOrCreate({
				id : id
			});
			
			var dataservices = new DataServiceCollection();
			dataservicesPromise = dataservices.fetch();

			accessMode = "read";
			
			object.type = this.objectName;
			
			objectPromise = object.fetch();

			if (Cookie.get("UserID")) {
				user = User.findOrCreate({
					id : Cookie.get("UserID")
				});
				
				if (!user.get('Watchlist')) {
					var watchlist = new Watchlist();
					
					watchlist.urlRoot = user.urlRoot + "/" + user.id + "/watchlists";
					
					watchlistPromise = watchlist.fetch();
				} else {
					var watchlist = user.get('Watchlist');
				}
				
				var self = this;
				
				$.when(objectPromise, watchlistPromise).then(function() {
					user.set('Watchlist', watchlist);
					
					if (self.isWatchedObject(object, watchlist)) {
						object.isWatched = true;
					}
					var objectView = new SingleObjectView({
						el : $('#content'),
						model : object
					});
					
					objectView.render();
					
					app.activeView = objectView;
				});
			} else {
				$.when(objectPromise).then(function() {
					var objectView = new SingleObjectView({
						el : $('#content'),
						model : object
					});
					
					objectView.render();
					
					app.activeView = objectView;
					
					var ontologyClass = new OntologyClass();
					
					ontologyClass.urlRoot = ontologyClass.urlRoot + "?name=" + object.type;
					
					ontologyClassPromise = ontologyClass.fetch();
					
					$.when(ontologyClassPromise).then(function() {
						var ontologyInformationView = new OntologyInformationView({
							el : $('#ontologyInformation'),
							model : ontologyClass
						});
						
						$("#ontologyInformation").append(ontologyInformationView.render().el);
					});
					
					
				});
			}
		}
	},
	EntityDetails : function(id, entityID) {
		var entityBase = window[this.objectName].findOrCreate({
			id : id
		});
		entityBase.type = this.objectName;
		
		
		entityBasePromise = entityBase.fetch();

		$.when(entityBasePromise).then(function() {
			var object = window[entityBase.type + "Entity"].findOrCreate({
				id : entityID
			});
			
			object.type = entityBase.type + "Entity";
			
			object.set(entityBase.type, entityBase);
			
			accessMode = "read";
			
			object.fetch({
				success : function() {
					var objectView = new SingleEntityView({
						el : $('#content'),
						model : object
					});
					
					objectView.render();
					
					var watchlist = new Watchlist();
					
					watchlist.urlRoot = self.user.urlRoot + "/" + self.user.id + "/watchlists";
					
					objectView.user.set('Watchlist', watchlist);
					
					watchlist.fetch();
				}
			});
		});
		
	},
	entityImport : function(id) {
		if (isAuthorized(this.objectName, Cookie.get("UserRoleID"))) {
			var object = window[this.objectName].findOrCreate({
				id : id
			});
			
			accessMode = "read";
			
			object.type = this.objectName;
			
			objectPromise = object.fetch();

			$.when(objectPromise).then(function() {
				var entityImportView = new EntityImportView({
					el : $('#content'),
					model : object
				});
				
				entityImportView.render();
			});
		} else {
			var alert_msg = '<div class="alert alert-warning">'+
			'Authentication Warning'+
			'<br/>' + 'Login Failed'+
			'<br/>' + '<a href="http://localhost.ontologydriven/usermanagement/recovery">' + 'Password Recovery '+ '</a>' +
	    	'</div>';
			
			$('#alerts').html(alert_msg);
		}
	},
	newObject : function() {
		var object = window[this.objectName].findOrCreate({
			id : null
		});
		
		accessMode = "edit";
		
		object.type = this.objectName;

		var objectView = new SingleObjectView({
			el : $('#content'),
			model : object
		});
		
		objectView.render();
	},
	newEntity : function(id) {
		var entityBase = window[this.objectName].findOrCreate({
			id : id
		});
		entityBase.type = this.objectName;
		
		
		entityBasePromise = entityBase.fetch();

		$.when(entityBasePromise).then(function() {
			var object = window[entityBase.type + "Entity"].findOrCreate({
				id : null
			});
			object.type = entityBase.type + "Entity";
			
			object.set(entityBase.type, entityBase);
			
			accessMode = "edit";
			
			var objectView = new SingleEntityView({
				el : $('#content'),
				model : object
			});
			
			objectView.render();

		});
	},

	intro : function() {
		intro_view = new IntroView({
			el : $('#content')
		});

		intro_view.render();
	}
});
tpl.loadTemplates([ 
	   '../../layouts/objectlist', 
	   '../../layouts/entitylist', 
	   '../../layouts/singleobject', 
	   '../../layouts/ontologyinformation', 
	   '../../layouts/concreteinformation', 
	   
	   '../../components/accordiongroup', 
	   '../../components/accordionitem', 
	   '../../components/backgrid', 
	   '../../components/backgrid_actions', 
	   
	   '../../components/input_datepicker',
	   '../../components/input_textarea',
	   '../../components/input_text',
	   '../../components/input_tags',
	   '../../components/input_highcharts',
	   '../../components/input_select',
	   '../../components/input_locationmap',
	   '../../components/input_datepicker',
	   '../../components/input_checkbox'
   ], true,
function() {
	app = new AppRouter();
	Backbone.history.start();
});
var BaseView = Backbone.View.extend({
	initialize : function() {
		//this.viewFactory = new ViewFactory();
	},
	events : {
	},
	createAdditionalFieldView : function(field) {
		for (var i=0; i < this.model.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			var rel_entity = this.model.get('RelationOntologyClassOntologyPropertyEntities').models[i];
			if (rel_entity.get('OntologyPropertyEntity').get('OntologyProperty').get('name') === field) {
				var additionalfieldView = new InputLabelView({model: rel_entity.get('OntologyPropertyEntity')});
				additionalfieldView.field = field;
				
				return additionalfieldView;
			}
		}
	},
	focusView : function(item) {
		$("#context").html("");
		
		var input_id_element = $(item).closest('label');
		
		
		var newContextActionButton = new ButtonView({id: "btn_context_dataservice", model: this.model.boundOntologyClass});
		//newContextActionButton.events['click #btn_import_dataservice'] = 'importDataService';
		//newContextActionButton.delegateEvents();
		$("#context").append(newContextActionButton.render().el);
		
		
	},
	createEntityFieldView : function(field) {
		for (var i=0; i < this.model.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			var rel_entity = this.model.get('RelationOntologyClassOntologyPropertyEntities').models[i];
			if (rel_entity.get('OntologyPropertyEntity').get('OntologyProperty').get('name') === field) {
				var fieldView = new InputTextView({model: rel_entity.get('OntologyPropertyEntity')});
				fieldView.field = field;
				
				return fieldView;
			}
		}
		for (var i=0; i < this.model.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			var rel_entity = this.model.get('RelationOntologyClassOntologyClassEntities').models[i];
			if (rel_entity.get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === field) {
				var fieldView = new InputSelectView({model: rel_entity});
				//var fieldView = new InputSelectView({model: rel_entity, tagName: 'IncomingOntologyClassEntity'});
				fieldView.field = 'IncomingOntologyClassEntity';
				
				fieldView.labelName = field;
				
				return fieldView;
				
			}
		}
	},
	createEntityGroupFieldView : function(field, classEntity) {
		for (var i=0; i < classEntity.get('RelationOntologyClassOntologyPropertyEntities').models.length; i++) {
			var rel_entity = classEntity.get('RelationOntologyClassOntologyPropertyEntities').models[i];
			if (rel_entity.get('OntologyPropertyEntity').get('OntologyProperty').get('name') === field) {
				var fieldView = new InputTextView({model: rel_entity.get('OntologyPropertyEntity')});
				fieldView.field = field;
				fieldView.url = '#' + rel_entity.get('OntologyPropertyEntity').get('name').replaceAll('/', '_');
				
				return fieldView;
			}
		}
		for (var i=0; i < classEntity.get('RelationOntologyClassOntologyClassEntities').models.length; i++) {
			var rel_entity = classEntity.get('RelationOntologyClassOntologyClassEntities').models[i];
			if (rel_entity.get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === field) {
				var fieldView = new InputSelectView({model: rel_entity});
				//var fieldView = new InputSelectView({model: rel_entity, tagName: 'IncomingOntologyClassEntity'});
				fieldView.field = 'IncomingOntologyClassEntity';
				
				fieldView.labelName = field;
				
				return fieldView;
				
			}
		}
	},
	createFieldViewByModel : function(model, field, withCell) {
		var value = model.get(field);
		var value_type = typeof value;
		if (value_type === "object" && value) {
			if (value.models) {
				value.type = getSingular(field);
			} else {
				value.type = field;
			}
		} else {
			if (value === null) {
				if (field[0] === field[0].toUpperCase()) {
					value = new window[field];
					value.type = field;
					model.set(field, value);
				} else {
					value_type = "string";
				}
			}
		}
		
		
		var enumeration = null;
		var model_name;
		var model_name_set;
		var object;
		var object_working;
		
		if (value === null) {
			for (var i=0; i < model.relations.length; i++) {
				if (model.relations[i].key === field) {
					model_name =  model.relations[i].relatedModel;
					
					object = window[model_name];
					object_working = object.findOrCreate({id: null});
					
					if (object_working.__proto__.enumeration) {
						model_name_set = model_name;
						value_type = "enumeration";
						enumeration = object_working.__proto__.enumeration;
					} else {
						model_name_set = model_name;
						value = object_working;
						value.type = field;
					}
				}
			}
		} else {
			model_name =  "";
			
			object = null;
			object_working = null;
			
			for (var i=0; i < model.relations.length; i++) {
				if (model.relations[i].key === field) {
					model_name =  model.relations[i].relatedModel;
					
					object = window[model_name];
					object_working = object.findOrCreate({id: null});
					
					if (object_working.__proto__.enumeration) {
						model_name_set = model_name;
						value_type = "enumeration";
						enumeration = object_working.__proto__.enumeration;
					}
				}
			}
		}
		
		if (value_type === "string" || value_type === "number") {
			if (field !== "id" && field.slice(-2) !== "ID" && field !== "DataServices") {
				if (field.slice(-2) == "At" || field.slice(-4) == "Date") {
					var fieldView = new DatePickerView({model: model});
					fieldView.field = field;
					
					return fieldView;
				} else if (field.slice(-10) == "Definition") {
					var fieldView = new InputTextAreaView({model: model});
					fieldView.field = field;
					
					return fieldView;
				} else {
					var fieldView = new InputTextView({model: model});
					fieldView.field = field;
					if (field === "name") {
						if (typeof model.type === 'undefined') {
							model.type = model.collection.type;
						}
						fieldView.url = '../' + getPlural(model.type).toLowerCase() + '/#' + model.id;
					}
					
					return fieldView;
				}
			}
		} else if (value_type === "boolean") {
			fieldView = new InputCheckBoxView({model: model});
			fieldView.field = field;
			
			return fieldView;
		} else if (value_type === "enumeration") {
			var fieldView = new InputSelectView({model: model, withCell: withCell});
			fieldView.field = field;
			fieldView.options = enumeration;
			
			return fieldView;
		} else if (value !== null) {
			if (typeof value === "object") {
				
				if (value.models) {
					if (field.indexOf("Relation") !== -1) {
						var fieldView = new AccordionGroupView({collection : model.get(field)});
						fieldView.field = field;
						
						return fieldView;
					} else if (field.indexOf("Observations") !== -1) {
						var fieldView = new HighChartsView({model : model});
						fieldView.field = field;
						
						return fieldView;
					} else {
						var fieldView = new InputTagsView({model: model});
						fieldView.field = field;
						
						return fieldView;
					}
					
				} else {
					var fieldView = new InputSelectView({model: model, withCell: withCell});
					//var fieldView = new InputSelectView({model: this.model, tagName: tagName});
					fieldView.field = field;
					
					return fieldView;
					
					/*if (field.indexOf("Location") !== -1) {
						var fieldView = new LocationMapView({model: this.model});
						fieldView.field = field;
						
						return fieldView;
					} else {
						var fieldView = new InputSelectView({model: this.model});
						fieldView.field = field;
						
						return fieldView;
					}*/
					
				}
			}
		}
		
		
		return false;
	},
	createFieldView : function(field, withCell) {
		var value = this.model.get(field);
		var value_type = typeof value;
		if (value_type === "object" && value) {
			if (value.models) {
				value.type = getSingular(field);
			} else {
				value.type = field;
			}
		} else {
			if (value === null) {
				if (field[0] === field[0].toUpperCase()) {
					value = new window[field];
					value.type = field;
					this.model.set(field, value);
				} else {
					value_type = "string";
				}
			}
		}
		
		
		var enumeration = null;
		var model_name;
		var model_name_set;
		var object;
		var object_working;
		
		if (value === null) {
			for (var i=0; i < this.model.relations.length; i++) {
				if (this.model.relations[i].key === field) {
					model_name =  this.model.relations[i].relatedModel;
					
					object = window[model_name];
					object_working = object.findOrCreate({id: null});
					
					if (object_working.__proto__.enumeration) {
						model_name_set = model_name;
						value_type = "enumeration";
						enumeration = object_working.__proto__.enumeration;
					} else {
						model_name_set = model_name;
						value = object_working;
						value.type = field;
					}
				}
			}
		} else {
			model_name =  "";
			
			object = null;
			object_working = null;
			
			for (var i=0; i < this.model.relations.length; i++) {
				if (this.model.relations[i].key === field) {
					model_name =  this.model.relations[i].relatedModel;
					
					object = window[model_name];
					object_working = object.findOrCreate({id: null});
					
					if (object_working.__proto__.enumeration) {
						model_name_set = model_name;
						value_type = "enumeration";
						enumeration = object_working.__proto__.enumeration;
					}
				}
			}
		}
		
		if (value_type === "string" || value_type === "number") {
			if (field !== "id" && field.slice(-2) !== "ID" && field !== "DataServices") {
				if (field.slice(-2) == "At" || field.slice(-4) == "Date") {
					var fieldView = new DatePickerView({model: this.model});
					fieldView.field = field;
					
					return fieldView;
				} else if (field.slice(-10) == "Definition") {
					var fieldView = new InputTextAreaView({model: this.model});
					fieldView.field = field;
					
					return fieldView;
				} else {
					var fieldView = new InputTextView({model: this.model});
					fieldView.field = field;
					
					return fieldView;
				}
			}
		} else if (value_type === "boolean") {
			fieldView = new InputCheckBoxView({model: this.model});
			fieldView.field = field;
			
			return fieldView;
		} else if (value_type === "enumeration") {
			var fieldView = new InputSelectView({model: this.model, withCell: withCell});
			fieldView.field = field;
			fieldView.options = enumeration;
			
			return fieldView;
		} else if (value !== null) {
			if (typeof value === "object") {
				
				if (value.models) {
					if (field.indexOf("Relation") !== -1) {
						var fieldView = new AccordionGroupView({collection : this.model.get(field)});
						fieldView.field = field;
						
						return fieldView;
					} else if (field.indexOf("Observations") !== -1) {
						var fieldView = new HighChartsView({model : this.model});
						fieldView.field = field;
						
						return fieldView;
					} else {
						var fieldView = new InputTagsView({model: this.model});
						fieldView.field = field;
						
						return fieldView;
					}
					
				} else {
					var fieldView = new InputSelectView({model: this.model, withCell: withCell});
					//var fieldView = new InputSelectView({model: this.model, tagName: tagName});
					fieldView.field = field;
					
					return fieldView;
					
					/*if (field.indexOf("Location") !== -1) {
						var fieldView = new LocationMapView({model: this.model});
						fieldView.field = field;
						
						return fieldView;
					} else {
						var fieldView = new InputSelectView({model: this.model});
						fieldView.field = field;
						
						return fieldView;
					}*/
					
				}
			}
		}
		
		
		return false;
	},
	assign : function (selector, view) {
	    var selectors;
	    if (_.isObject(selector)) {
	        selectors = selector;
	    }
	    else {
	        selectors = {};
	        selectors[selector] = view;
	    }
	    if (!selectors) return;
	    _.each(selectors, function (view, selector) {
	        view.setElement(this.$(selector)).render();
	    }, this);
	},
	renderTitle : function(title) {
		$(".page-header").attr("style", "display:show");
		
		if (title) {
			$("#title").html(title);
		} else {
			if (this.options) {
				$("#title").html(getPlural(this.options.objectName));
			} else if (this.model) {
				$("#title").html(this.model.type + ": " + this.model.get('name'));
			} else {
				$("#title").html(getSiteMapTitle());
			}
		}
	}
});
		
var SingleObjectView = BaseView.extend({
	tag : "form",
	id : "field-container",
	
	class : "form-horizontal",
	
	initialize : function() {
		this.template = _.template(tpl.get('layouts/singleobject'));

		this.fieldGroups = [];
		
		if (this.model.type !== "OntologyClass" && this.model.type !== "Ontology") this.fieldGroups = this.model.getFieldGroups();
		
		this.fieldViews = [];
		this.importProcesses = [];
		
		if (this.fieldGroups.length > 0) {
			this.hasFieldGroups = true;
			
			for (var i = 0; i < this.fieldGroups.length; i++) {
				if (this.fieldGroups[i].name === "Dashboard") {
					this.fieldGroups[i].fieldViews = this.getFieldViews();
				} else {
					this.fieldGroups[i].fieldViews = this.getGroupFieldViews(this.fieldGroups[i].name);
				}
			}
			
		} else {
			this.hasFieldGroups = false;
			
			for(field in this.model.__proto__.defaults) {
				if (field !== "id" && field.slice(-2) !== "ID" && field !== "DataServices") {
					fieldView = this.createFieldView(field);
					if (fieldView) {
						this.fieldViews.push(fieldView);
					}
				}
			}
		}
		
		
		this.contextButtonViews = [];
		
		
		if (accessMode == "read") {
			this.buttonView = new ButtonView({id: "btn_edit"});
		} else if (accessMode == "edit") {
			this.buttonView = new ButtonView({id: "btn_save"});
		}
		
		
		
		SingleObjectView.__super__.initialize.apply(this, arguments);
		
		//this.model.bind('change', this.render);
	},
	events : {
		"click #btn_save" : "saveObject",
		"click #btn_edit" : "editObject",
		"click #btn_endpoint" : "endpoint",
		"click #btn_entityList" : "entityList",
		"click #btn_endpoint" : "endpoint",
		"click #btn_watch" : "watchObject",
		"click #btn_ignore" : "ignoreObject",
		"click #btn_entityImport" : "entityImport",
		"click #btn_importProcessing" : "importProcessing"
	},
	addContextButton : function(newContextActionButton) {
		this.contextButtonViews.push(newContextActionButton);
		
	},
	addEntity : function(item) {
    	var url = window.location.href;

    	window.location = url + '/entities/new';
    	
	},
	endpoint : function(item) {
    	var url = window.location.href;

    	window.location = url + '/endpoint';
    	
	},
	watchObject : function() {
		if (app.activeView.model.id == this.model.id) {
			this.model.watch();
			
			this.model.isWatched = true;
			
			this.render();
		}
		
		return false;
	},
	importProcessing : function(item) {
		var targetID = parseInt(item.currentTarget.attributes.targetid.nodeValue);
		
		this.importProcesses[targetID].start();
		
		return false;
	},
	ignoreObject : function() {
		if (app.activeView.model.id == this.model.id) {
			this.model.ignore();
			
			this.model.isWatched = false;
			
			this.render();
		}
		
		return false;
	},
	editObject : function() {
		accessMode = "edit";
		
		this.render();
		
		return false;
	},
	entityImport : function() {
		var url = window.location.href;

    	window.location = url + '/entities/import';
	},
	entityList : function() {
		var url = window.location.href;

    	window.location = url + '/entities';
	},
	isGroupFieldView : function(fieldName) {
		for (var i = 0; i < this.fieldGroups.length; i++) {
			if (this.fieldGroups[i].name === fieldName) {
				return true;
			}
		}
		
		return false;
	},
	getFieldViews : function() {
		var fieldViews = [];
		
		for(field in this.model.attributes) {
			if (field !== "id" && field.slice(-2) !== "ID" && !this.model.isProtected(field)) {
				if (field.substring(0, 8) !== "Relation" && field.slice(-12) !== "Observations" && !this.isGroupFieldView(field)) {
					fieldView = this.createFieldView(field);
					
					fieldViews.push(fieldView);
				}
			}
		}
		
		return fieldViews;
	},
	getGroupFieldViews : function (groupName) {
		var fieldViews = [];
		
		//var relations = this.model.__proto__.relations;
		var relations = this.model.getRelatedObjects();
		
		for (var i=0; i < relations.length; i++) {
			var entityFieldName = relations[i].related.type;
			
			if (entityFieldName === groupName) {
				
			} else if (getPlural(entityFieldName) === groupName) {
				if (groupName.indexOf("Observations") !== -1) {
					var chartsView = new HighChartsView({model : this.model});
					chartsView.field = groupName;
					
					
					fieldViews.push(chartsView);
				} else {
					var groupClassEntities = this.model.getEntities(entityFieldName);
					
					if (groupClassEntities.length == 1) {
						for (var e=0; e < groupClassEntities.length; e++) {
							for(field in groupClassEntities[e].attributes) {
								if (field !== "id" && field !== "name" && field.slice(-2) !== "ID" && !this.model.isProtected(field)) {
									if (field.substring(0, 3) !== "Rel") {
										fieldView = this.createFieldViewByModel(groupClassEntities[e], field);
										
										fieldViews.push(fieldView);
									}
								}
							}
						}
					} else {
						if (this.model.isConcrete()) {
							for (var e=0; e < groupClassEntities.length; e++) {
								for(field in groupClassEntities[e].attributes) {
									if (!this.model.isProtected(field) && (field === "name" || field === "date")) {
										if (field.substring(0, 3) !== "Rel") {
											fieldView = this.createFieldViewByModel(groupClassEntities[e], field);
											
											fieldViews.push(fieldView);
										}
									}
								}
								
							}
						} else {
							for (var e=0; e < groupClassEntities.length; e++) {
								
								var relOCOC_Properties = relations[i].get('IncomingOntologyClass').get('RelationOntologyClassOntologyProperties');
								for (var j=0; j < relOCOC_Properties.length; j++) {
									var groupClassPropertyName = relOCOC_Properties.models[j].get('OntologyProperty').get('name');
									
									if (relations[i].get('OntologyRelationType').get('name') === 'hasMany') {
										if (groupClassPropertyName === 'name') {
											fieldView = this.createEntityGroupFieldView(groupClassPropertyName, groupClassEntities[e]);
											
											fieldViews.push(fieldView);
										}
									} else {
										fieldView = this.createEntityGroupFieldView(groupClassPropertyName, groupClassEntities[e]);
										
										fieldViews.push(fieldView);
									}
									
									
								}
							}
						}
					}
					
				}
				
			}
			
		}
		
		return fieldViews;
	},
	saveObject : function() {
		var input_type;
		
		var attrs = { }, k;
		for(k in this.model.attributes) {
	        attrs[k] = this.model.attributes[k];
	        if (k !== "id") {
	        	input_type = $('#' + k).prop('type');
	        	
	        	//if (input_type !== "checkbox" && k.indexOf("relation") === -1) {
	        	if (input_type === "text" || input_type === "password") {
		        //if (input_type !== "checkbox" && k.indexOf("relation") === -1) {
	        		this.model.set(k, $('#' + k).val());
	        	} else {
	        		var objectValue = attrs[k];
	        		
	        		if (objectValue instanceof Backbone.Model) {
	        			if (objectValue.isEmpty()) {
	        				this.model.set(k, null);
	        			}
	        		}
	        	}
	        }
	    }
		
		if (!this.model.isNew()) {
			this.model.url = this.model.urlRoot + "/" + this.model.id;
		}
		
		this.model.save({}, {
		    success: function(model, response){
		    	if(typeof response.error === 'undefined'){
		    		model.url = model.urlRoot;
			    	
			    	if (model.type.substr(-6, 6) === "Entity") {
			    		var url = window.location.href;
			    		
			    		if (url.substr(-1) == '/') url = url.substr(0, url.length - 2);

				    	url = url.split('/');
				    	url.pop();
				    	
				    	var target = url[url.length-2] + "/entities/#" + model.id + "/";
				    	
				    	
				    	//app.navigate(target, true);
			    	} else {
			    		app.navigate('#' + model.id, true);
			    	}
		    	} else {
		    		var alert_msg = '<div class="alert alert-danger">'+
		        	response.error.message+
					'<br/>' + response.error.details+
			    	'</div>';
	    			
	    			$('#alerts').html(alert_msg);
		    	}
		    	
		    },
	        error: function(model, response) {
	        	var alert_msg = '<div class="alert alert-danger">'+
	        	response.get('error').message+
				'<br/>' + response.get('error').details+
		    	'</div>';
    			
    			$('#alerts').html(alert_msg);
    			
	            //console.log(model);
	        }/*,
	        wait: true*/
		});
		
		accessMode = "read";
		
		this.render();
		
		return false;
	},
	render : function() {
		var data = {"hasFieldGroups": this.hasFieldGroups};

		this.$el.html(this.template(data));
		
		this.renderTitle();
 		
		if (this.hasFieldGroups) {
			this.renderFieldGroups();			
		} else {
			for (var i = 0; i < this.fieldViews.length; i++) {
				this.$("#field-container").append(this.fieldViews[i].render().el);
				this.fieldViews[i].delegateEvents();
			}
		}
		
		//this.$("#ontologyInformation").append('<i>').append(this.ontologyInformationView.render().el).append('<i>');
		//this.$("#ontologyInformation").append('aasdfasdf');
		
		this.renderButtons();
				
		return this;
	},
	renderFieldGroups : function() {
		var fieldGroupTab = '';
		var tabContainerItem = '';
		
		tabContainerItem = '<div role="tabpanel" class="tab-pane active" id="dashboard"></div>';
		
		this.$("#tab-container").html(tabContainerItem);
		
		for (var i=1; i < this.fieldGroups.length; i++) {
			tabContainerItem = '<div role="tabpanel" class="tab-pane" id="' + this.fieldGroups[i].name.toLowerCase() + '"></div>';
			this.$("#tab-container").append(tabContainerItem);
		}
		
		
		fieldGroupTab = '<li role="presentation" class="active"><a href="#dashboard" id="dashboard-tab" role="tab" data-toggle="tab" aria-controls="dashboard" aria-expanded="true">Overview</a></li>';
		
		this.$("#object-tag-navigation").html(fieldGroupTab);
		for (var j = 0; j< this.fieldGroups[0].fieldViews.length; j++) {
			this.$("#dashboard").append(this.fieldGroups[0].fieldViews[j].render().el);
			this.fieldGroups[0].fieldViews[j].delegateEvents();
		}
		
		for (var i=1; i < this.fieldGroups.length; i++) {
			fieldGroupTab = '<li role="presentation" class=""><a href="#' + this.fieldGroups[i].name.toLowerCase() + '" id="' + this.fieldGroups[i].name.toLowerCase() + '-tab" role="tab" data-toggle="tab" aria-controls="' + this.fieldGroups[i].name.toLowerCase() + '" aria-expanded="true">' + this.fieldGroups[i].name + '</a></li>';
			this.$("#object-tag-navigation").append(fieldGroupTab);
			
			for (var j = 0; j< this.fieldGroups[i].fieldViews.length; j++) {
				this.$('#' + this.fieldGroups[i].name.toLowerCase() ).append(this.fieldGroups[i].fieldViews[j].render().el);
				this.fieldGroups[i].fieldViews[j].delegateEvents();
			}
		}
	},
	renderImportProcessingButton : function (name, importProcessID) {
		var importProcessingButton = new ButtonView({id: "btn_importProcessing", targetID: importProcessID});
		
		importProcessingButton.buttonObjectName = name;
		
		this.$("#sidebar").append('<br /><br /><br /><br />').append(importProcessingButton.render().el);
		importProcessingButton.delegateEvents();
	},
	renderButtons : function() {
		if (Cookie.get("UserID")) {
			if (accessMode == "read") {
				this.buttonView.id = "btn_edit";
			} else if (accessMode == "edit") {
				this.buttonView.id = "btn_save";
			}
			
			this.$("#sidebar").append(this.buttonView.render().el);
			this.buttonView.delegateEvents();
			
			if (this.model.type === "OntologyClass") {
				var newEntityButton = new ButtonView({id: "btn_add_entity"});
				
				this.$("#sidebar").append(newEntityButton.render().el);
				newEntityButton.delegateEvents();
				
				
				
				var entitiesImportButton = new ButtonView({id: "btn_entityImport"});
				
				this.$("#sidebar").append('<br /><br /><br /><br />').append(entitiesImportButton.render().el);
				entitiesImportButton.delegateEvents();
				
				var entitiesButton = new ButtonView({id: "btn_entityList"});
				
				this.$("#sidebar").append('<br /><br />').append(entitiesButton.render().el);
				entitiesButton.delegateEvents();
				
			}
			
			
			if (this.model.isWatched) {
				var ignoreObjectButton = new ButtonView({id: "btn_ignore"});
				
				self.$("#sidebar").append('<br /><br /><br /><br />').append(ignoreObjectButton.render().el);
				ignoreObjectButton.delegateEvents();
			} else {
				var watchObjectButton = new ButtonView({id: "btn_watch"});
				
				self.$("#sidebar").append('<br /><br /><br /><br />').append(watchObjectButton.render().el);
				watchObjectButton.delegateEvents();
			}
			
			
			if (this.model.type === "DataMartService") {
				var endpointButton = new ButtonView({id: "btn_endpoint"});
				
				this.$("#sidebar").append(endpointButton.render().el);
				endpointButton.delegateEvents();
			}
		} else {
			if (this.model.type == "User") {
				if (accessMode == "edit") {
					this.buttonView.id = "btn_save";
				}
				
				this.$("#sidebar").append(this.buttonView.render().el);
				this.buttonView.delegateEvents();
			}
		}		
	}
});
		
var InputView = BaseView.extend({
});
		
var ButtonView = Backbone.View.extend({
	tagName : "button",
	className : "btn btn-sm btn-primary pull-right",
	
	buttonObjectName : "",
	
	targetID : null,
	
	initialize : function(options) {
		this.targetID = options.targetID;
	},
	events : {
		"click" : "click",
		
	},
	click : function () {
		var id_splitted = this.id.split("_");
		
		if (id_splitted[1] === "context") {
			this.start();
		}
		return id_splitted[1].charAt(0).toUpperCase() + id_splitted[1].slice(1);
	},
	start : function () {
		var service = new Service({
			ontology : "edi",
			ressource : "import",
			parameterName : "importprocessID",
			parameterValue : this.id
		});
		service.fetch();
	},
	getLabel : function () {
		var id_splitted = this.id.split("_");
		
		return id_splitted[1].charAt(0).toUpperCase() + id_splitted[1].slice(1) + ' ' + this.buttonObjectName;
	},
	importDataService : function() {
		alert('ass');
	},
	render : function() {
		this.$el.attr('id', this.id);
		this.$el.attr('targetID', this.targetID);
		
		this.$el.html(this.getLabel());
		
		return this;
	}
});
		
var language = Cookie.get('userLanguage');
if (language == null) language = 'en';
var words = {
		en: {
			name: 'Name',
			//name: 'Ontology Name',
			owned_by: 'Owner',
			isFinal: 'Final',
			isPrivate: 'Private',
			isIdentifier: 'Identifier',
			defaultValue: 'Default Value',
			validationRegularExpression: 'Validation Rule',
			lexeme: 'Lexeme',
			type: 'Type',
			length: 'Length',
			language: 'Language'
		},
		de: {
			isPrivate: 'Geschuetzt',
			language: 'Sprache'
		}
	
};
function isAuthorizedField(objectName, fieldName, roleID) {
	if (roleID === "1") {
		return true;
	}
	/*if (objects[objectName] !== undefined) {
		if (objects[objectName][roleID] !== undefined) {
			return true;
		} else if (objects[objectName][99] !== undefined) {
			return true;
		}
	}*/
	
	return false;
}
function isAuthorized(objectName, roleID) {
	if (objects[objectName] !== undefined) {
		if (objects[objectName][roleID] !== undefined) {
			return true;
		} else if (objects[objectName][99] !== undefined) {
			return true;
		}
	}
	
	return false;
}
function getWordLike(like) {
	if (words[language][like]) return words[language][like];
	if (words.en[like]) return words.en[like];
	
	if (like) {
		if (like.substring(like.indexOf("_")+1) == "name") {
			return like.substring(0, like.indexOf("_"));
		} else {
			like = like.substring(like.indexOf("_")+1);
		}
		if (words[language][like]) return words[language][like];
		if (words.en[like]) return words.en[like];
		
		return like;
	}
	
	return null;
}
function getPlural(singular) {
	if (singular) {
		var trans = getWordLike(singular);
		
		if (trans === "Index") return "Indices";
		
 		return trans.pluralize();
	}
	
	return null;
}
function getOntology(objectName) {
	var objName = '';
	objName = objName + objectName;
	objName = objName.toLowerCase();
	var ontologyShortName = "km";
	if (objName == "lexeme" || objName == "word") {
		ontologyShortName = "nlp";
	} else if (objName == "datamart" || objName == "datamartservice") {
		ontologyShortName = "dwh";
	} else if (objName == "dataservice" || objName == "dataprovider" || objName == "datasource" || objName == "importservice") {
		ontologyShortName = "edi";
	} else if (objName == "role" || objName == "user" || objName == "owner") {
		ontologyShortName = "usermanagement";
	} else if (objName == "indicator" || objName == "release") {
		ontologyShortName = "neuronalysis";
	}
	
	return ontologyShortName;
}
function getSingular(plural) {
	if (plural) {
		var trans = getWordLike(plural);
		
		return trans.singularize();
	}
	
	return null;
}
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
function lowercaseFirstLetter(string) {
    return string.charAt(0).toLowerCase() + string.slice(1);
}
function getURLParameter(name) {
	return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(location.search)||[,""])[1].replace(/\+/g, '%20'))||null
}
function getSiteMapTitle() {
	for (var i=0; i < sitemap.urls.length; i++) {
		if (location.pathname.indexOf(sitemap.urls[i].url) > -1) {
			return sitemap.urls[i].title;
		}
	}
	
	return null;
}
Date.prototype.format = function() {
	var todaysDate = new Date();
	
	var formattedDate = "";
	
	var yyyy = this.getFullYear().toString();
	var mm = (this.getMonth()+1).toString();
	var dd  = this.getDate().toString();
	
	if(this.toDateString() == todaysDate.toDateString()) {
		var hours  = this.getHours().toString();
		var minutes  = this.getMinutes().toString();
		
		if (hours < 10) hours = "0" + hours;
		
		formattedDate = hours + ":" + minutes;
	} else {
		formattedDate = yyyy + "-" + (mm[1]?mm:"0"+mm[0]) + "-" + (dd[1]?dd:"0"+dd[0]);
	}
	   
	return formattedDate;
};
String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.split(search).join(replacement);
};
window.AccessSummary = Master.extend({
	urlRoot : apiHost + "monitoring/accesssummary",
	
	initialize: function(props){
	    this.urlRoot += props.topic;
	},
	
	defaults : {
		"id" : null,
		"AccessDestinations" : ""
	},
	relations : [ {
		type : Backbone.HasMany,
		key : 'AccessDestinations',
		relatedModel : 'AccessDestination',
		collectionType : 'AccessDestinationCollection'
	} ]
});

window.AccessDestination = Master.extend({
	defaults : {
		"url" : "",
		"title" : "",
		"visits" : ""
	}
});

window.AccessDestinationCollection = MasterCollection.extend({
	model : AccessDestination
});
window.DataSummary = Master.extend({
	urlRoot : apiHost + "edi/datasummary",
	
	initialize: function(props){
	    this.urlRoot += props.topic;
	},
	
	defaults : {
		"id" : null,
		"ontologies" : "",
		"ontologyClasses" : "",
		"ontologyProperties" : "",
		"ontologyRelationTypes" : "",
		"facts" : ""
	}
});

window.Error = Backbone.RelationalModel.extend({
    defaults:{
    	"message":""
    }
});

window.ErrorCollection = Backbone.Collection.extend({
    model:Error,
});
window.Information = Master.extend({
	url : apiHost + "extraction/information",
	defaults : {
		"id": null
	},
	relations : [ ]
});

window.InformationCollection = MasterCollection.extend({
	model : Information,
	url : apiHost + "extraction/information"
});
window.Knowledge = Master.extend({
	url : apiHost + "extraction/knowledge",
	defaults : {
		"id": null
	},
	relations : [ {
		type : Backbone.HasMany,
		key : 'fragments',
		relatedModel : 'Fragment',
		// includeInJSON: Backbone.Model.prototype.idAttribute,
		collectionType : 'FragmentCollection'
	} ]
});

window.KnowledgeCollection = MasterCollection.extend({
	model : Knowledge,
	url : apiHost + "extraction/knowledge"
});
window.News = Master.extend({
	urlRoot : apiHost + "news",
	defaults : {
		"id" : null,
		"title" : "",
		"publishedAt" : "",
		"header" : "",
		"content" : ""
	}
});

window.NewsCollection = MasterCollection.extend({
	model : News,
	url : apiHost + "news",
	
	initialize: function(props){
	    this.url += props.topic;
	}
	
});
window.Role = Master.extend({
	urlRoot : apiHost + "authentication/roles",

	defaults : {
		"id" : null,
		"name" : ""
	}
});

window.RoleCollection = MasterCollection.extend({
	model : Role,
	url : apiHost + "authentication/roles"
});
window.Service = Master.extend({
	urlRoot : kmapiHost,

	initialize: function(props){
		var parameterString = $.param( props.parameters );

	    this.urlRoot += props.ontology + "/" + props.ressource + "?" + parameterString;
	},
	defaults : {
		"ontology" : null,
		"ressource" : null
	}
});

window.ServiceCollection = MasterCollection.extend({
	model : Service,
	url : kmapiHost
});
window.Teaser = Master.extend({
	urlRoot : apiHost + "teaser",
	
	initialize: function(props){
	    this.urlRoot += "/" + props.ontologyName;
	},
	
	defaults : {
		"id" : null
	},
	relations : [  ]
});

window.Watchlist = Master.extend({
	urlRoot : apiHost + "observation/watchlists",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Owner" : null,
		"WatchlistItems" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Owner',
		relatedModel : 'Watchlist'
	}, {
		type : Backbone.HasMany,
		key : 'WatchlistItems',
		relatedModel : 'WatchlistItem',
		collectionType : 'WatchlistItemCollection'
	} ]
});

window.WatchlistCollection = MasterCollection.extend({
	model : Watchlist,
	url : apiHost
});

window.WatchlistItem = Master.extend({
	urlRoot : apiHost + "observation/watchlistitems",
	
	defaults : {
		"id" : null,
		"OntologyClass" : null,
		"Entity" : null
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	},
	{
		type : Backbone.HasOne,
		key : 'Entity',
		relatedModel : 'Entity'
	}]
});

window.WatchlistItemCollection = MasterCollection.extend({
	model : WatchlistItem,
	url : apiHost
});

window.Entity = Master.extend({
	defaults : {
		"id" : null
	}
});
window.AccessSummaryView = Backbone.View.extend({
	tagName : "ul",
	className : "media-list",

	initialize : function(options) {
		this.options = options;
	},
	
	render : function() {
		if (this.options.summaryData.get('AccessDestinations').at(0) == null)
			return false;
		
		
		var newsHTML = '';
		newsHTML += '<ul class="list-group">';
		
		
		$(this.el).append('<h2>' + this.options.objectName + '</h2>');
				
		_.each(this.options.summaryData.get('AccessDestinations').models, function(object) {
			newsHTML += '<li class="list-group-item">' +
			  '<span class="badge">' + object.get('visits') + '</span>' +
			  '<a href="' + object.get('url') + '">' + object.get('title') + '</a>' +
			  '</li>';
		}, this);
		
		newsHTML += '</ul>';
		
		this.$el.append(newsHTML);
		
		
		return this;
	}
});
var AccordionGroupView = BaseView.extend({
	initialize : function() {
		this.collection.on('add', this.render, this);
		
		this.template = _.template(tpl.get('components/accordiongroup'));
		
		this.accordionItemViews = [];
		
		if (this.collection.length > 0) {
			for(var i=0; i<this.collection.length; i++) {
				this.collection.models[i].type = this.collection.type;
				
				accordionitemView = new AccordionItemView({model : this.collection.models[i]});
				if (accordionitemView) {
					this.accordionItemViews.push(accordionitemView);
				}
			}
		}

     	this.createAddNewButtonView(this.field);
	},
	events : {
		"click #btn_add" : "addnewRelation",
	},
	addnewRelation : function() {
		var relation_type = getSingular(this.field);
		
		var newRelation = window[relation_type].findOrCreate({
			id : null
		});
		
		newRelation.type = relation_type;
		
		this.collection.add(newRelation);
		
		accordionitemView = new AccordionItemView({model : newRelation});
		if (accordionitemView) {
			this.accordionItemViews.push(accordionitemView);
		}
		
		this.render();
		
		return false;
	},
	createAddNewButtonView : function(field) {
		this.addnewbuttonView = new ButtonView({className: "btn btn-xs btn-primary pull-right", id: "btn_add"});
	},
	render:function () {
		this.reset;
		
		var data = {"object_name": this.collection.type.toLowerCase(), "field_name": this.collection.getFieldName()};
		
		this.$el.html(this.template(data));
		
		var collectionAttributes = this.collection.getModelAttributes();
		
		for (var i = 0; i < collectionAttributes.length; i++) {
			if (collectionAttributes[i] !== "id" && collectionAttributes[i].indexOf("Outgoing") == -1 && this.collection.type.indexOf("Relation" + collectionAttributes[i].replace("Entity", "")) == -1) {
				this.$("#relation_headers").append('<th>' + collectionAttributes[i] + "</th>");
			}
		}
		this.$("#relation_action").append('<div class="col-md-12" id="panelheader_buttons" style="text-align: right;"></div>');
		
		
		for (var i = 0; i < this.accordionItemViews.length; i++) {
			this.$("#relations").append(this.accordionItemViews[i].render().el);
			this.accordionItemViews[i].delegateEvents();
		}
    	
		if (accessMode == "edit") {
			this.$("#panelheader_buttons").append(this.addnewbuttonView.render().el);
			this.addnewbuttonView.delegateEvents();
		}
		
		return this;
    }
});
		
var AccordionItemView = BaseView.extend({
	tagName : "tr",
	initialize : function() {
		this.template = _.template(tpl.get('components/accordionitem'));
		
		this.accordionfieldViews = [];


		for(field in this.model.attributes) {
			if (field !== "id" && field.indexOf("Outgoing") == -1 && this.model.type.indexOf("Relation" + field.replace("Entity", "")) == -1) {
				fieldView = this.createFieldView(field, true);
				if (fieldView) {
					fieldView.withLabel = false;
					this.accordionfieldViews.push(fieldView);
				}
			}
		}
		
     	this.createDeleteButtonView();
		
	},
	events : {
		"click #btn_delete" : "deleteObject",
	},
	createDeleteButtonView : function() {
		this.deletebuttonView = new ButtonView({className: "btn btn-xs btn-primary pull-right", id: "btn_delete"});
	},
	deleteObject : function() {
		this.model.destroy();
		
		this.remove();
		
		return false;
	},
	render : function() {
		this.$el.empty();
		
		for (var i = 0; i < this.accordionfieldViews.length; i++) {
			this.$el.append($('<td style="padding: 2px; height: 34px;">').append(this.accordionfieldViews[i].render().el));
			this.accordionfieldViews[i].delegateEvents();
		}
		
		if (accessMode == "edit") {
			if(this.$('#panelitem_buttons').length == 0) {
				this.$el.append('<td id="panelitem_buttons" style="width: 80px; text-align: right;"></td>');
			}
			
			this.$("#panelitem_buttons").append(this.deletebuttonView.render().el);
			this.deletebuttonView.delegateEvents();
		} else {
			this.$el.append('<td id="panelitem_buttons" style="width: 80px; text-align: right;"></td>');
		}

		return this;
	}
});
		
window.BackGridTableView = BaseView.extend({
	initialize : function(options) {
		if (options.tplPath) {
			this.template = _.template(tpl.get(options.tplPath));
		} else {
			this.template = _.template(tpl.get('components/backgrid'));
		}
		
		this.OntologyClass = options.OntologyClass;
		
		this.actions = [];
		
		this.columns = [ /*{
			name : "id",
			label : "ID",
			cell : UriCell.extend({
				target : '_self'
			}),
			href : function(rawValue, formattedValue, model) {
				var url = window.location.href;

		    	if (url.indexOf("entities") == -1) {
		    		return "#" + model.id;
		    	} else {
		    		if (url.substr(-1) == '/') url = url.substr(0, url.length - 2);

			    	url = url.split('/');
			    	url.pop();
			    	
			    	return url.join('/') + "/entities/#" + model.id;
		    	}
			},
			editable : false
		},*/
		    {
			name : "name",
			label : "Object Name",
			cell : UriCell.extend({
				target : '_self'
			}),
			href : function(rawValue, formattedValue, model) {
				var url = window.location.href;

		    	if (url.indexOf("entities") === -1) {
		    		return "#" + model.id;
		    	} else {
		    		if (model.collection.OntologyClass.get('isPersistedConcrete')) {
		    			if (url.substr(-1) == '/') url = url.substr(0, url.length - 2);

				    	url = url.split('/');
				    	//url.pop();
				    	
				    	return url[0] + '//' + url[1] + '/' + url[2] + '/wiki/articles/#' + model.get('name');
		    		} else {
		    			if (url.substr(-1) == '/') url = url.substr(0, url.length - 2);

				    	url = url.split('/');
				    	url.pop();
				    	
				    	return url.join('/') + "/entities/#" + model.id;
		    		}
		    		
		    	}
			},
			editable : false
		} ];
	},
	
	render : function() {
		this.$el.html(this.template());

		
		// Set up a grid to use the pageable collection
		var pageableGrid = new Backgrid.Grid({
			columns : this.columns,
			collection : this.collection
		});

		
		// Render the grid
		var $example2 = $("#backgrid-table");
		$example2.append(pageableGrid.render().el)

		// Initialize the paginator
		var paginator = new Backgrid.Extension.Paginator({
		  collection: this.collection
		});

		// Render the paginator
		$example2.after(paginator.render().el);

		// Initialize a client-side filter to filter on the client
		// mode pageable collection's cache.
		/*var filter = new Backgrid.Extension.ClientSideFilter({
		  collection: this.model,
		  fields: ['name']
		});*/

		// Render the filter
		//$example2.before(filter.render().el);

		// Add some space to the filter and move it to the right
		//$(filter.el).css({float: "right", margin: "20px"});

		// Fetch some data
		this.collection.fetch({reset: true, OntologyClass : this.OntologyClass});
		
		
		return this;
	}

});

var ActionsCell = Backgrid.Cell.extend({
	className: "integer-cell renderable",
	
	initialize : function() {
		this.template = _.template(tpl.get('components/backgrid_actions'));

		this.iconViews = [];
		
		for (var i = 0; i < this.__proto__.actions.length; i++) {
			iconView = this.createIconView(this.__proto__.actions[i]);
			if (iconView) {
				this.iconViews.push(iconView);
			}
		}
	},
	events: {
	      "click #btn_delete": "deleteRow",
		  "click #btn_start": "startProcess",
		  "click #btn_generateOntology": "generateOntology",
		  "click #btn_generateWebsite": "generateWebsite",
		  "click #btn_entityList": "entityList",
		  "click #btn_addEntity": "addEntity"
	},
    deleteRow: function (e) {
        e.preventDefault();
        this.model.collection.remove(this.model);
        this.model.destroy();
    },
    startProcess: function (e) {
    	this.model.start();
    },
	addEntity : function(item) {
		var url = window.location.href;

    	/*if (url.substr(-1) == '/') url = url.substr(0, url.length - 2);

    	url = url.split('/');
    	url.pop();*/

    	window.location = url + '#' + this.model.id + '/entities/new';
	},
    entityList: function (e) {
    	var url = window.location.href;

    	/*if (url.substr(-1) == '/') url = url.substr(0, url.length - 2);

    	url = url.split('/');
    	url.pop();*/

    	//window.location = url.join('/') + '/ontologyclasses/#' + this.model.id + '/entities';
    	window.location = url + '#' + this.model.id + '/entities';
    },
    generateOntology: function (e) {
    	var url = window.location.href;

    	if (url.substr(-1) == '/') url = url.substr(0, url.length - 2);

    	url = url.split('/');
    	url.pop();

    	window.location = url.join('/') + '/ontologies/#' + this.model.id;
    },
    generateWebsite: function (e) {
    	var url = window.location.href;

    	if (url.substr(-1) == '/') url = url.substr(0, url.length - 2);

    	url = url.split('/');
    	url.pop();

    	window.location = url.join('/') + '/websites/#' + this.model.id;
    },
	createIconView : function(action) {
    	var iconView = new IconView({id: "btn_" + action});
		iconView.action = action;
		
		return iconView;
    },
    render: function () {
		this.$el.html(this.template());

		var data = {"ontologyID": this.model.id};
		
    	for (var i = 0; i < this.iconViews.length; i++) {
    		this.$("#actions").append(this.iconViews[i].render().el);
			this.iconViews[i].delegateEvents();
		}
    	
		return this;
    }
});
var DeleteCell = Backgrid.Cell.extend({
	className: "integer-cell renderable",
	
	initialize : function() {
		this.template = _.template(tpl.get('components/backgrid_delete'));
	},
    events: {
      "click #btn_delete": "deleteRow"
    },
    deleteRow: function (e) {
      e.preventDefault();
      this.model.collection.remove(this.model);
      this.model.destroy();
    },
    render: function () {
      this.$el.html(this.template());
      this.delegateEvents();
      return this;
    }
});
var GenerateCell = Backgrid.Cell.extend({
	className: "integer-cell renderable",
	
	initialize : function() {
		this.template = _.template(tpl.get('components/backgrid_generate'));
	},
    events: {
      "click #btn_generate": "generateOntology"
    },
    generateOntology: function (e) {
    	var url = window.location.href;

    	if (url.substr(-1) == '/') url = url.substr(0, url.length - 2);

    	url = url.split('/');
    	url.pop();

    	window.location = url.join('/') + '/codegenerator/#' + this.model.id;
    	
    	//app.navigate(url.join('/') + '/#' + this.model.id, {trigger: true, replace: true});
    	/*e.preventDefault();
      this.model.collection.remove(this.model);
      this.model.destroy();*/
    },
    render: function () {
    	var data = {"ontologyID": this.model.id};
		
    	this.$el.html(this.template(data));
    	this.delegateEvents();
    	return this;
    }
});
var StartCell = Backgrid.Cell.extend({
	className: "integer-cell renderable",
	
	initialize : function() {
		this.template = _.template(tpl.get('components/backgrid_start'));
	},
    events: {
      "click #btn_start": "startProcess"
    },
    startProcess: function (e) {
    	this.model.start();
    },
    render: function () {
    	var data = {"ontologyID": this.model.id};
		
    	this.$el.html(this.template(data));
    	this.delegateEvents();
    	return this;
    }
});
var UriCell = Backgrid.UriCell.extend({
	render: function () {
        this.$el.empty();
        var rawValue = this.model.get(this.column.get("name"));
        var formattedValue = this.formatter.fromRaw(rawValue, this.model);
        var href = _.isFunction(this.column.get("href")) ? this.column.get('href')(rawValue, formattedValue, this.model) : this.column.get('href');
        this.$el.append($("<a>", {
          tabIndex: -1,
          href: href || rawValue,
          title: this.title || formattedValue,
          target: this.target
        }).text(formattedValue));
        this.delegateEvents();
        return this;
    }
});
var ButtonAddNewView = BaseView.extend({
	initialize : function() {
		this.template = _.template(tpl.get('components/button_addnew'));
	},
	events : {
	},
	/*addnewObject : function(item) {
        app.navigate('new', true);
	},*/
	render : function() {
		this.$el.html(this.template());
		
		return this;
	}
});
		
var ButtonDeleteView = ButtonView.extend({
	initialize : function() {
		this.template = _.template(tpl.get('components/button_delete'));
	},
	events : {
	},
	render : function() {
		this.$el.html(this.template());
		
		return this;
	}
});
		
window.DataSummaryView = Backbone.View.extend({
	tagName : "ul",
	className : "media-list",

	initialize : function(options) {
		this.options = options;
	},
	
	render : function() {
		$(this.el).append('<h2>' + this.options.objectName + '</h2>');
				
		var newsHTML = '';
		newsHTML += '<ul class="list-group">';
		
		newsHTML += '<li class="list-group-item">' +
			  '<span class="badge">' + this.options.summaryData.get('ontologies') + '</span>' +
			  '<a href="./km/ontologies/">Ontologies</a>' +
			  '</li>';

		newsHTML += '<li class="list-group-item">' +
		  '<span class="badge">' + this.options.summaryData.get('ontologyClasses') + '</span>' +
		  '<a href="./km/ontologyclasses/">Classes</a>' +
		  '</li>';

		newsHTML += '<li class="list-group-item">' +
		  '<span class="badge">' + this.options.summaryData.get('ontologyProperties') + '</span>' +
		  '<a href="./km/ontologyproperties/">Properties</a>' +
		  '</li>';

		newsHTML += '<li class="list-group-item">' +
		  '<span class="badge">' + this.options.summaryData.get('ontologyRelationTypes') + '</span>' +
		  '<a href="./km/ontologyrelationtypes/">Relation Types</a>' +
		  '</li>';

		newsHTML += '</ul>';
		
		this.$el.append(newsHTML);
		
		
		return this;
	}
});

window.WikiDataSummaryView = DataSummaryView.extend({
	render : function() {
		$(this.el).append('<h2>' + this.options.objectName + '</h2>');
				
		var newsHTML = '';
		newsHTML += '<ul class="list-group">';
		
		
		for (var k in this.options.summaryData.get('ontologyClassEntities')){
			newsHTML += '<li class="list-group-item">' +
			  '<span class="badge">' + this.options.summaryData.get('ontologyClassEntities')[k]['count'] + '</span>' +
			  '<a href="./km/ontologyclasses/#' + this.options.summaryData.get('ontologyClassEntities')[k]['classID'] + '/entities' + '">' + getPlural(k) + '</a>' +
			  '</li>';
		};
		
		
			
		newsHTML += '</ul>';
		
		
		this.$el.append(newsHTML);
		
		
		return this;
	}
});
var IconView = Backbone.View.extend({
	tagName : "button",
	className : "btn-danger btn-xs",
	
	getGlyphicon : function (action) {
		var glyphicon;
		if (action === "start") {
			glyphicon = "play";
		} else if (action === "generateOntology") {
			glyphicon = "cog";
		} else if (action === "generateWebsite") {
			glyphicon = "cog";
		} else if (action === "delete") {
			glyphicon = "remove";
		} else if (action === "entityList") {
			glyphicon = "list";
		} else if (action === "addEntity") {
			glyphicon = "plus";
		}
		
		return glyphicon;
	},
	render : function() {
		this.$el.attr('id', this.id);
		this.$el.html('<span class="glyphicon glyphicon-' + this.getGlyphicon(this.action) + '"></span>');
		
		this.$el.css({
		     'margin-left'          : "3px",
		     'height'				: "16px",
			 'width'				: "16px",
			 'font-size'			: "8px",
			 'padding-left'			: "3px"
		    });

		return this;
	}
});
		
var InputCheckBoxView = InputView.extend({
	
	initialize : function() {
		this.template = _.template(tpl.get('components/input_checkbox'));
	},
	events : {
		"click" : "changeValue"
	},
	changeValue : function(item) {
		this.model.set(item.target.id, item.target.checked);
	},
	render : function() {
		var data = {"object_name": this.model.type.toLowerCase(), "field_name": this.field, "field_value": this.model.get(this.field)};

		this.$el.html(this.template(data));
		
		return this;
	}
});
		
var DatePickerView = InputView.extend({
	
	initialize : function() {
		this.template = _.template(tpl.get('components/input_datepicker'));
	},
	events : {
		//"click" : "showDatepicker",
		"change" : "changeValue"
	},
	showDatepicker : function () {
		//$("#" + this.field).daterangepicker();
	},
	changeValue : function(item) {
		this.model.set(item.target.parentNode.id, item.target.value);
		
		this.$("#" + this.field).datepicker('hide');
		this.$("#" + this.field).datepicker('place');
	},
	render : function() {
		var data = {"object_name": this.model.type.toLowerCase(), "field_name": this.field, "field_value": this.model.get(this.field)};

		this.$el.html(this.template(data));
		
		this.$("#" + this.field).datepicker();
		
		return this;
	}
});
		
var FileUploadView = InputView.extend({
	initialize : function() {
		this.template = _.template(tpl.get('components/input_file'));
	},
	render : function() {
		this.$el.html(this.template());
		
		this.$("#input-1").fileinput({'showUpload':true, 'previewFileType':'any', 'uploadUrl': 'http://localhost.ontologydriven/api/edi/uploadfile?ontologyClassID=' + this.model.get('id')});
		
		return this;
	}
});
		
var HighChartsView = InputView.extend({
	initialize : function(options) {
		this.template = _.template(tpl.get('components/input_highcharts'));
		this.withLabel = true;
		this.withCell = false;
		
		if (options.observationsLimit) {
			this.observationsLimit = options.observationsLimit;
		}
		
	},
	events : {
		
	},
	changeValue : function(item) {
	},
	render : function() {
		var model_observations = this.model.get(this.field);
		
		if (model_observations !== undefined) {
			var data = {"object_name": this.model.type.toLowerCase(), "field_name": this.field, "label": this.label, "field_value": model_observations.getString(), "withCell" : this.withCell, "withLabel" : this.withLabel};
		} else {
			var data = {"object_name": this.model.type.toLowerCase(), "field_name": this.field, "label": this.label, "field_value": null, "withCell" : this.withCell, "withLabel" : this.withLabel, "chart_height" : "100px"};
		}
			
		
		this.$el.html(this.template(data));
		
		if (model_observations === undefined || model_observations.length == 0) {
			model_observations = new ObservationCollection();
			
			if (this.model.isConcrete()) {
				if (this.model.type === "Indicator") {
					model_observations.type = "IndicatorObservations";
					model_observations.url = apiHost + "economics/indicators/" + this.model.id + "/observations";
				} else if (this.model.type === "Instrument") {
					model_observations.type = "InstrumentObservations";
					model_observations.url = apiHost + "economics/instruments/" + this.model.id + "/observations";
				}
			} else {
				if (this.model.get('OntologyClass').get('name') === "Indicator") {
					model_observations.type = "IndicatorObservations";
					model_observations.url = apiHost + "economics/indicators/" + this.model.id + "/observations";
					
				} else if (this.model.get('OntologyClass').get('name') === "Instrument") {
					model_observations.type = "InstrumentObservations";
					model_observations.url = apiHost + "economics/instruments/" + this.model.id + "/observations";
					
				} else {
					model_observations.type = "IndicatorObservations";
					model_observations.url = apiHost + "economics/indicators/" + this.model.id + "/observations";
					
				}
			}
			
			if (this.observationsLimit) {
				model_observations.url += "?limit=" + this.observationsLimit;
			}
			
			
			model_observations.fetch({
				success : function(model_observations) {
					var series_data = new Array;
					
					for (var i = 0; i < model_observations.models.length; i++) {
						var parts = model_observations.models[i].get('date').split(' ')[0].split('-');
						
						series_data.push([
			                  Date.UTC(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2])),
			                  parseFloat(model_observations.models[i].get('value'))]
						);
					}
					
					console.log({
				            	y: series_data[0][1],
				            	segmentColor: 'red'});
					
					this.$("#" + getPlural(model_observations.type)).highcharts({
				        chart: {
				            zoomType: 'x',
				            height: 200
				        },
				        title: {
				            text: ''
				        },
				        subtitle: {
				            text: document.ontouchstart === undefined ?
				                    '' :
				                    ''
				        },
				        xAxis: {
				            type: 'datetime',
				            minRange: 14 * 24 * 3600000 // fourteen days
				        },
				        yAxis: {
				            title: {
				                text: ''
				            }
				        },
				        legend: {
				            enabled: false
				        },
				        plotOptions: {
				            area: {
				                fillColor: {
				                    linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1},
				                    stops: [
				                        [0, Highcharts.getOptions().colors[0]],
				                        [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
				                    ]
				                },
				                marker: {
				                    radius: 2
				                },
				                lineWidth: 1,
				                states: {
				                    hover: {
				                        lineWidth: 1
				                    }
				                },
				                threshold: null
				            }
				        },
				        series: [{
				            type: 'area',
				            name: '',
				            pointInterval: 24 * 3600 * 1000,
				            pointStart: Date.UTC(1906, 0, 1),
				            data: series_data
				        }, {
				            type: 'coloredline',
				            data: [{
				                    x: series_data[series_data.length-2][0],
				                    y: series_data[series_data.length-2][1],
				                    segmentColor: 'red'
				            },{
				            		x: series_data[series_data.length-1][0],
			                    	y: series_data[series_data.length-2][1],
				                    segmentColor: 'red'
				            }]
				        }]
			        });
				}
			});
		}
		
		return this;
	}
});
		
var InputLabelView = InputView.extend({
	initialize : function() {
		this.template = _.template(tpl.get('components/input_label'));
	},
	events : {
		"change" : "changeValue"
	},
	changeValue : function(item) {
		if (typeof this.model.attributes.name === 'undefined') {
			this.model.set(item.target.id, item.target.value);
		} else {
			this.model.set('name', item.target.value);
		}
	},
	render : function() {
		if (typeof this.model.attributes.name === 'undefined') {
			var data = {"object_name": this.model.type.toLowerCase(), "field_name": this.field, "field_value": this.model.get(this.field), "label_name": this.field, "label_value": this.model.get(this.field)};
		} else {
			var data = {"object_name": this.model.type.toLowerCase(), "field_name": this.field, "field_value": this.model.get('OntologyProperty').get('name'), "label_name": this.field, "label_value": this.model.get('name')};
		}
		
		this.$el.html(this.template(data));
		
		return this;
	}
});
		
var LocationMapView = InputView.extend({
	initialize : function(model, field) {
		this.model = model;
		this.field = field;
		
		this.template = _.template(tpl.get('components/input_locationmap'));
		
		/*this.map = new google.maps.Map(
            this.el,
            this.model.toJSON()
        );*/
        //this.render();
        
		
		
	},
	events : {
		
	},
	changeValue : function(item) {
	},
	render : function() {
		this.$el.html(this.template());

	    var map = L.map(this.$('#map')[0]).setView([55.75, 37.58], 10);
	    L.tileLayer('http://{s}.tile.cloudmade.com/4e5f745e28654b7eb26aab577eed79ee/997/256/{z}/{x}/{y}.png', {
	      attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://cloudmade.com">CloudMade</a>[…]',
	      maxZoom: 18
	    }).addTo(map);

	    return this;
	}
});
		
var InputSelectView = InputView.extend({
	
	initialize : function(options) {
		this.template = _.template(tpl.get('components/input_select'));
		
		this.labelName = this.field;
		
		this.withLabel = true;
		
		if (options.withCell) {
			this.withCell = options.withCell;
		} else {
			this.withCell = false;
		}
		
	},
	events : {
		"change" : "changeValue",
		"click" : "focusView"
	},
	changeValue : function(item) {
		var model_name = item.target.id;
		
		if (item.added) {
			if (item.added.name) {
				model_object = window[model_name].findOrCreate({
					id: item.added.id,
					name: item.added.name
				});
			} else {
				model_object = window[model_name].findOrCreate({
					id: item.added.id,
					name: item.added.text
				});
			}
			
			if (model_name === "IncomingOntologyClassEntity") {
				var propertyEntity = window["OntologyPropertyEntity"].findOrCreate({
					id : null,
					name : item.added.text,
					OntologyProperty : this.model.get('IncomingOntologyClassEntity').get('OntologyClass').getOntologyPropertyByName('name')
				});
				
				var relPropertyEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
					id : null,
					OntologyPropertyEntity : propertyEntity
				});
				
				model_object.get('RelationOntologyClassOntologyPropertyEntities').models.push(relPropertyEntity);
				
				model_object.set('OntologyClass', this.model.get('IncomingOntologyClassEntity').get('OntologyClass'));
			}
			
			this.model.set(model_name, model_object);
		} else if (item.removed) {
			model_object = window[model_name].findOrCreate({
				id: item.removed.id
			});
			
			model_object.clear();
		}
		
		return model_object;
	},
	render : function() {
		if (!this.labelName) {
			this.labelName = this.field;
		}
		
		
		var data = {"object_name": this.model.type.toLowerCase(), "field_name": this.field, "field_value": this.model.get(this.field), "withCell" : this.withCell, "withLabel" : this.withLabel, "labelName" : this.labelName};
		
		var model_select = this.model.get(this.field);
		if (!model_select) {
			model_select = new window[this.field];
			model_select.type = this.field;
		}
		if (model_select.type === "IncomingOntologyClassEntity") {
			if (model_select.get('OntologyClass') && (model_select.urlRoot.indexOf("ontologyClassID") === -1)) {
				model_select.urlRoot += "?ontologyClassID=" + model_select.get('OntologyClass').id;
			}
		}
		if (accessMode == "edit") {
			this.$el.html(this.template(data));
			
			
			
			var object = this.model.get(this.field);
			
			if (this.options) {
				this.$("#" + model_select.type).select2(select2ConfigMin.get(this.options, model_select.type));
				this.$("#" + model_select.type).select2('val', object);
			} else {
				this.$("#" + model_select.type).select2(select2Config.get(model_select.urlRoot, this.labelName));
				if (this.model) {
					if (model_select.type === "IncomingOntologyClassEntity") {
						var object = model_select.getNameProperty();
						
						if (object) {
							this.$("#" + model_select.type).select2('val', object);
						}
					} else {
						this.$("#" + model_select.type).select2('val', model_select);
					}
				}
			}
		} else if (accessMode == "read") {
			if (this.model) {
				var object_string = "";
				
				if (model_select.type === "OntologyClassEntity" || model_select.type === "IncomingOntologyClassEntity") {
					var object = model_select.getNameProperty();
					
					if (object) {
						if (model_select.id) {
							object_string += '<a href="#' + object.get('name') + '">' + object.get('name') + '</a>';
						} else {
							object_string += object.get('name');
						}
						
						data.field_id = object.get('id');
						data.field_value = object_string;
					} else {
						data.field_id = null;
						data.field_value = "";
					}
					
					
				} else {
					var object = this.model.get(this.field);
					
					if (object) {
						if (object.attributes) {
							if (object.get('name')) {
								if (this.field === "IncomingOntologyClass") {
									object_string += '<a href="../../km/ontologyclasses/#' + object.get('id') + '">' + object.get('name') + '</a>';
								} else {
									object_string += '<a href="../../' + getOntology(getSingular(this.field.toString().toLowerCase())) + '/' + getPlural(this.field).toLowerCase() + '/#' + object.get('id') + '">' + object.get('name') + '</a>';
								}
							} else {
								if (object.get('text')) {
									object_string += object.get('text');
								}
							}
							
							data.field_id = object.get('id');
							data.field_value = object_string;
						} else {
							if (object.name) object_string += object.name;
							
							data.field_id = object.id;
							data.field_value = object_string;
						}
						
						
					} else {
						data.field_id = null;
						data.field_value = null;
					}
				}
			} else {
				var enumeration = null;
				
				for (var i=0; i < this.model.relations.length; i++) {
					if (this.model.relations[i].key === this.field) {
						model_name =  this.model.relations[i].relatedModel;
						
						object = window[model_name];
						object_working = object.findOrCreate({id: null});
						
						if (object_working.__proto__.enumeration) {
							model_name_set = model_name;
							value_type = "enumeration";
							enumeration = object_working.__proto__.enumeration;
						} else {
							model_name_set = model_name;
							value = object_working;
						}
					}
				}
				
				if (enumeration) {
					var object_string = "";
					object_string += enumeration[this.model.get(scope + "ID")].text;
					
					data.field_value = object_string;
				}
			}
			
			this.$el.html(this.template(data));
		}
		
		
		return this;
	}
});
		
var InputTagsView = InputView.extend({
	initialize : function() {
		this.template = _.template(tpl.get('components/input_tags'));
	},
	events : {
		"change" : "changeValue"
	},
    changeValue:function (item) {
    	var object = window[this.model.get(this.field).type];
		
       	if(typeof item.removed  !== 'undefined') {
    		var object_removed = object.findOrCreate({
				id: item.removed.id
			});
    		
    		this.model.get(this.field).remove(object_removed);
    		
    		object_removed.set(this.model.type.toLowerCase() + "ID", null);
    		object_removed.save();
    	} else if(typeof item.added  !== 'undefined') {
    		/*var object_added = object.findOrCreate({
				id: item.added.id
			});*/
    		
    		this.model.get(this.field).push(item.added);
    	}
		
        return this.model;
    },
	render : function() {
		var model_tags = this.model.get(this.field);
		
		var data = {"object_name": this.model.type.toLowerCase(), "field_name": this.field, "field_value": model_tags.getString(), "withCell" : this.withCell, "withLabel" : this.withLabel};
		
		
		if (accessMode == "edit") {
			this.$el.html(this.template(data));
			
			this.$("#" + this.field).select2(select2Config.getTags(model_tags.__proto__.url, model_tags.type.toLowerCase(), true, model_tags.models));
	    	
	    	var tags = [];
			
			for (var i = 0; i < model_tags.models.length; i++) {
				if (typeof model_tags.models[i].attributes.language !== 'undefined') {
					tags.push({
						id : model_tags.models[i].id,
						text : model_tags.models[i].get('name') + " [" + model_tags.models[i].get('Language').get('isoCode') + "]"
					});
				} else {
					tags.push({
						id : model_tags.models[i].id,
						text : model_tags.models[i].get('name')
					});
				}
			}
			
			this.$("#" + this.field).select2('data', tags);
		} else if (accessMode == "read") {
			var tags = [];
			
			var object_string = "";
			
			for (var i = 0; i < model_tags.models.length; i++) {
				object_string += '<a href="../../' + getOntology(getSingular(this.field.toLowerCase())) + '/' + getPlural(this.field.toLowerCase()) + '/#' + model_tags.models[i].get('id') + '">' + model_tags.models[i].get('name') + '</a>';
				
				if (i < model_tags.models.length - 1) {
					object_string += ', ';
				}
			}
			
			
			
			data.field_value = object_string;
			
			
			this.$el.html(this.template(data));
		}
		
		
		
		return this;
	}
});
		
var InputTextView = InputView.extend({
	initialize : function() {
		this.template = _.template(tpl.get('components/input_text'));
	},
	events : {
		"change" : "changeValue"
	},
	changeValue : function(item) {
		if (typeof this.model.attributes.name === 'undefined') {
			this.model.set(item.target.id, item.target.value);
		} else {
			this.model.set('name', item.target.value);
		}
	},
	render : function() {
		var field_value = '';
		
		if (typeof this.model.type === 'undefined') {
			this.model.type = 'ReleasePublication';
		}
    		
		
		if (this.model.type === "OntologyPropertyEntity") {
			if (this.url) {
				if (accessMode == "edit") {
					field_value += this.model.get('name');
				} else {
					field_value += '<a href="' + this.url + '">' + this.model.get('name') + '</a>';
				}
			} else {
				field_value += this.model.get('name');
			}
		} else {
			if (this.url) {
				field_value += '<a href="' + this.url + '">' + this.model.get(this.field) + '</a>';
			} else {
				field_value += this.model.get(this.field);
			}
		}
		
		var data = {"object_name": this.model.type.toLowerCase(), "field_name": this.field, "field_value": field_value};

		this.$el.html(this.template(data));
		
		return this;
	}
});
		
var InputTextAreaView = InputView.extend({
	initialize : function() {
		this.template = _.template(tpl.get('components/input_textarea'));
	},
	events : {
		"change" : "changeValue"
	},
	changeValue : function(item) {
		this.model.set(item.target.id, item.target.value);
	},
	render : function() {
		var data = {"object_name": this.model.type.toLowerCase(), "field_name": this.field, "field_value": this.model.get(this.field)};

		this.$el.html(this.template(data));
		
		return this;
	}
});
		
window.IntroView = BaseView.extend({

    initialize:function () {
		this.template = _.template(tpl.get('layouts/intro'));
    },

    events:{
    },
   
    render: function () {
		var data = {};
		
    	this.$el.html(this.template(data));
    	
    	return this;
    }
});
		
window.NewsView = Backbone.View.extend({
	tagName : "ul",
	className : "media-list",

	initialize : function(options) {
		this.options = options;
	},
	render : function() {
		if (this.collection.at(0) == null)
			return false;
		
		$(this.el).append('<h2>' + this.options.objectName + '</h2>');
				
		_.each(this.collection.models, function(object) {
			$(this.el).append(new NewsItemView({
				model : object
			}).render().el);
		}, this);
		
		
		return this;
	}
});

var NewsItemView = Backbone.View.extend({
	tagName : "li",
	className : "media",

	initialize : function(options) {
		this.options = options;
	},

	render : function() {
		var newsHTML = '';
		
		var datePublishedAt = new Date(this.model.get('publishedAt'));
		
		newsHTML += '<div class="media-body">' +
	      '<h4 class="media-heading">' + this.model.get('title') + ' (' + datePublishedAt.format() + ')' + '</h4>';
		
		if (this.model.get('header')) newsHTML +=  '<p>' + this.model.get('header') + '</p>'
		
		newsHTML += this.model.get('content');
		newsHTML += '</div>';
		
		this.$el.append(newsHTML);
		
		return this;
	}
	
});
window.OntologyTeaserView = Backbone.View.extend({
	//tagName : "ul",
	//className : "media-list",

	initialize : function(options) {
		this.options = options;
	},
	
	render : function() {
		var titleHTML = '';
		titleHTML += '<h2>Economics</h2>';
		
		var subtitleHTML = '';
		subtitleHTML += '<div class="media-body">' +
	      '<h4 class="media-heading">' + '<a href="' + this.model.getUrl() + '">' + this.model.get('name') + '</a>' + ' last updated on ' + new Date(this.model.get('lastIndicatorObservationDate')).format() + '</h4>';
		
		subtitleHTML += '</div>';
		
		
		
		var chartsView = new HighChartsView({model : this.model, observationsLimit : 60});
		chartsView.withLabel = false;
		chartsView.field = 'IndicatorObservations';
		
		
		//teaserHTML += economicsView.render().el.html;
		
		//this.$el.html(this.template(data));
    	
		
		//$(this.el).append('<h2>' + this.options.objectName + '</h2>');
				
		/*_.each(this.options.summaryData.get('AccessDestinations').models, function(object) {
			newsHTML += '<li class="list-group-item">' +
			  '<span class="badge">' + object.get('visits') + '</span>' +
			  '<a href="' + object.get('url') + '">' + object.get('title') + '</a>' +
			  '</li>';
		}, this);
		*/
		
		
		this.$el.append(titleHTML).append(subtitleHTML).append(chartsView.render().$el);
		
		
		return this;
	}
});

window.FinancialMarketsTeaserView = Backbone.View.extend({
	//tagName : "ul",
	//className : "media-list",

	initialize : function(options) {
		this.options = options;
	},
	
	render : function() {
		var titleHTML = '';
		titleHTML += '<h2>Financial Markets</h2>';
		
		var subtitleHTML = '';
		subtitleHTML += '<div class="media-body">' +
	      '<h4 class="media-heading">' + '<a href="' + this.model.getUrl() + '">' + this.model.get('name') + '</a>' + ' last updated on ' + new Date(this.model.get('lastInstrumentObservationDate')).format() + '</h4>';
		
		subtitleHTML += '</div>';
		
		
		
		var chartsView = new HighChartsView({model : this.model, observationsLimit : 1000});
		chartsView.withLabel = false;
		chartsView.field = 'InstrumentObservations';
		
		//teaserHTML += economicsView.render().el.html;
		
		//this.$el.html(this.template(data));
    	
		
		//$(this.el).append('<h2>' + this.options.objectName + '</h2>');
				
		/*_.each(this.options.summaryData.get('AccessDestinations').models, function(object) {
			newsHTML += '<li class="list-group-item">' +
			  '<span class="badge">' + object.get('visits') + '</span>' +
			  '<a href="' + object.get('url') + '">' + object.get('title') + '</a>' +
			  '</li>';
		}, this);
		*/
		
		
		this.$el.append(titleHTML).append(subtitleHTML).append(chartsView.render().$el);
		
		
		return this;
	}
});
window.SelectView = Backbone.View
		.extend({
			tagName : "select",

			initialize : function(data) {
				this.model = data.model;
				this.options = data.options;
				this.fieldName = data.fieldName;
			},

			events : {
				'change' : 'onselect'
			},
			onselect : function() {
				if (this.el.options[this.el.selectedIndex]) {
					var attribute = {};
					attribute[this.fieldName] = this.el.options[this.el.selectedIndex].value;
					
					this.model.set(attribute);
				}

				return this;
			},

			render : function() {
				for (var i = 0; i < this.options.length; i++) {
					if (this.options[i].id == this.model.get(this.fieldName)) {
						this.$el.append('<option value="'
								+ this.options[i].id
								+ '" selected="true">'
								+ this.options[i].value
								+ '</option>');
					} else {
						this.$el.append('<option value="'
								+ this.options[i].id
								+ '">'
								+ this.options[i].value
								+ '</option>');
					}
				}

				this.onselect();

				return this;
			}
		});

var OptionView = Backbone.View.extend({

	tagName : "option",
	render : function() {
		var name = this.model.get("name");
		var id = this.model.get("id");

		if (id == this.options.OntologyrelationtypeID) {
			this.$el.html(name).val(id);
			this.$el.prop('selected', true);
		} else {
			this.$el.html(name).val(id);
		}

		return this;
	}
});
window.ServiceTeaserView = Backbone.View.extend({
	initialize : function(options) {
		this.options = options;
	},
	render : function() {
		var newsHTML = '';
		
		
		return this;
	}
});
window.TableView = Backbone.View
		.extend({
			tagName : 'table',
			className : 'table table-striped table-bordered bootstrap-datatable datatable',
			initialize : function() {
				this.template = _.template(tpl.get('table'));
			},
			render : function(eventName) {
				var title = $('#title').html();
				
				var UserID = Cookie.get('UserID');
				var UserRoleID = Cookie.get('UserRoleID');
				
				if (this.collection.at(0) == null)
					return false;
				
				var data = {"data": this.collection.at(0).toJSON()};
				
				this.$el.html(this.template(data));
				
				
				_.each(this.collection, function(object) {
					$(this.el).append(new TableRowView({
						model : object
					}).render().el);
				}, this);
				
				$('#title').html(getPlural(title));
				
				return this;
			}

		});

window.TableRowView = Backbone.View.extend({

	tagName : "tr",
	
	initialize : function() {
		this.template = _.template(tpl.get('tablerow'));

	},
	events : {
		'click #btn_remove' : 'deleteItem',
		'click #btn_create' : 'newEntity',
		'click #btn_list' : 'showEntities'
	},
	deleteItem : function(item) {
		this.model.destroy({
			success : function(model, response) {
				//this.remove();
				//console.log("Success");
			},
			error : function(model, response) {
				var alert_msg = '<div class="alert alert-danger">'
						+ response.responseText + '</div>';

				$('#alerts').html(alert_msg);
			}
		});

		return false;
	},
	showEntities:function () {
		location.href = 'http://localhost.ontologydriven/km/ontologyclasses/#' + this.model.id + '/entities';
    },
    newEntity:function () {
    	location.href = 'http://localhost.ontologydriven/km/ontologyclasses/#' + this.model.id + '/entities/new';
    },

	render : function() {
		var data = {"data": this.model.toJSON()};

		$(this.el).html(this.template(data));
		
		return this;
	}

});

window.TableCellView = Backbone.View.extend({

	tagName : "td",
	
	render : function() {
		$(this.el).html();
		
		return this;
	}

});
window.TableEntitiesView = Backbone.View
		.extend({

			tagName : 'table',
			className : 'table table-striped table-bordered bootstrap-datatable datatable',
			initialize : function(options) {
				this.options = options;
				_.bindAll(this, 'render');
				
				this.template = _.template(tpl.get('table_entities'));
				this.model.bind("reset", this.render, this);
				var self = this;
				this.model.bind("add", function(object) {
					$(self.el).append(new TableEntitiesRowView({
						model : object
					}).render().el);
				});
			},

			render : function(eventName) {
				if (this.model.at(0) == null)
					return false;
				
				var data = {"data": this.model.at(0).toJSON(), "OntologyClass_id": this.options.OntologyClass_id};

				
				this.$el.html(this.template(data));

				_.each(this.model.models, function(object) {
					$(this.el).append(new TableEntitiesRowView({
						model : object, OntologyClass_id: this.options.OntologyClass_id
					}).render().el);
				}, this);

				return this;
			}

		});

window.TableEntitiesRowView = Backbone.View.extend({

	tagName : "tr",
	
	initialize : function(options) {
		this.options = options;
		_.bindAll(this, 'render');
		
		this.template = _.template(tpl.get('tableentitiesrow'));
		this.model.bind("change", this.render, this);
		//this.model.bind("destroy", this.close, this);
	},
	events : {
		'click #btn_remove' : 'deleteItem'
	},
	deleteItem : function(item) {
		this.model.destroy({
			success : function(model, response) {
				this.remove();
				//console.log("Success");
			},
			error : function(model, response) {
				var alert_msg = '<div class="alert alert-danger">'
						+ response.responseText + '</div>';

				$('#alerts').html(alert_msg);
			}
		});

		return false;
	},
	showEntities:function () {
    	location.href = 'http://Ontologies.localhost/OntologyClasses/#' + this.model.id + '/entities';
    	
	       	/*var ontologyClassentity = new OntologyClassEntity();
			
			var ontologyClassentity_view = new OntologyClassEntityView({el: $('#content'), model: OntologyClassentity});

			OntologyClassentity_view.render();*/

    },
    newEntity:function () {
    	location.href = 'http://Ontologies.localhost/OntologyClasses/#' + this.model.id + '/entities/new';
    	
	       	/*var ontologyClassentity = new OntologyClassEntity();
			
			var ontologyClassentity_view = new OntologyClassEntityView({el: $('#content'), model: OntologyClassentity});

			OntologyClassentity_view.render();*/

    },

	render : function(eventName) {
		var data = {"data": this.model.toJSON(), "OntologyClass_id": this.options.OntologyClass_id};

		$(this.el).html(this.template(data));
		return this;
	}

});
var ConcreteInformationView = Backbone.View.extend({
	initialize : function() {
		this.template = _.template(tpl.get('layouts/concreteinformation'));
	},
	render : function() {
		var data = {"object": this.model};
		
		this.$el.html(this.template(data));
		
		return this;
	}
});
		
var EntityImportView = BaseView.extend({

    tagName:"div", // Not required since 'div' is the default if no el or tagName specified

    initialize:function () {
        this.template = _.template(tpl.get('layouts/entityimport'));
        
        this.fieldViews = [];
		
		fieldView = this.createFileUploadFieldView("entitiesFile");
		if (fieldView) {
			this.fieldViews.push(fieldView);
		}
    },

    events:{
        "click #btn_parse":"parseRessource"
    },
    createFileUploadFieldView : function(field) {
		var value_type = "file";
		
		if (value_type === "file") {
			fieldView = new FileUploadView();
			fieldView.field = field;
			fieldView.model = this.model;
			
			return fieldView;
		}
		
		return false;
	},
    render: function () {
		this.$el.html(this.template());
		
		this.renderTitle(this.model.get('name') + " Entities Import");
		
		this.$("#field-container").append(this.fieldViews[0].render().el);
		this.fieldViews[0].delegateEvents();
		
        return this;
    }
});
window.EntityListView = BaseView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/entitylist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection, OntologyClass : this.options.OntologyClass});
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete"]
			})
		})
		this.buttonView 	= new ButtonView({id: "btn_add_entity"});
	},
	events : {
		"click #btn_add_entity" : "addEntity"
	},
	addEntity : function(item) {
    	var url = window.location.href;

    	window.location = url + '/new';
	},
	render : function() {
		this.$el.html(this.template());
		
		$("#title").html(getPlural(this.options.objectName));
		
	    this.assign({
			'#table'       		: this.tableView
		});
		
	    this.$("#sidebar").append(this.buttonView.render().el);
	    this.buttonView.delegateEvents();
		
	    return this;
	}
});
window.ObjectListView = BaseView.extend({
	initialize : function(options) {
		this.options = options;
		
		this.template = _.template(tpl.get('layouts/objectlist'));
		
		this.tableView		= new BackGridTableView({collection : this.collection});
		this.tableView.columns.push({
			name : "actions", // The key of the model attribute
			label : "Actions", // The name to display in the header
			sortable: false,
			editable : false,
			cell : ActionsCell.extend({
				orderSeparator : '',
				actions : ["delete"]
			})
		})
		this.buttonView 	= new ButtonView({id: "btn_add"});
	},
	events : {
		"click #btn_add" : "addnewObject"
	},
	addnewObject : function(item) {
		app.navigate('new', true);
		
		return false;
	},
	render : function() {
		this.$el.html(this.template());
		
		this.renderTitle();
 		
	    this.assign({
			'#table'       		: this.tableView
		});
		
	    this.$("#sidebar").append(this.buttonView.render().el);
	    this.buttonView.delegateEvents();
		if (!Cookie.get("UserID") && Cookie.get("logged") == 0) {
			
	    }
		
	    return this;
	}
});
var OntologyInformationView = Backbone.View.extend({
	initialize : function() {
		this.template = _.template(tpl.get('layouts/ontologyinformation'));
	},
	render : function() {
		var data = {"ontologyClass": this.model};
		
		this.$el.html(this.template(data));
		
		return this;
	}
});
		
var SingleEntityView = SingleObjectView.extend({
	initialize : function() {
		SingleEntityView.__super__.initialize.apply(this, arguments);
	},
	events : {
		"click #btn_save" : "saveObject",
		"click #btn_addField" : "addField",
		"click #btn_watch" : "watchObject",
		"click #btn_ignore" : "ignoreObject",
		"click #btn_edit" : "editObject",
		"click #btn_importProcessing" : "importProcessing"
	},
	getFieldViews : function() {
		var fieldViews = [];
		
		for(field in this.model.attributes) {
			if (field !== "id" && field !== "name" && field.slice(-2) !== "ID" && !this.model.isProtected(field)) {
				if (field.substring(0, 3) !== "Rel") {
					fieldView = this.createFieldView(field);
					
					fieldViews.push(fieldView);
				}
			}
		}
		
		var relations_ococ = this.model.get('OntologyClass').get('RelationOntologyClassOntologyClasses');
		
		for (var i=0; i < relations_ococ.length; i++) {
			if (relations_ococ.models[i].get('OntologyRelationType').get('name') !== "extends" && relations_ococ.models[i].get('OntologyRelationType').get('name') !== "hasMany") {
				if (!relations_ococ.models[i].get('IncomingOntologyClass').isFieldGroup()) {
					var entityFieldName = relations_ococ.models[i].get('IncomingOntologyClass').get('name');
					
					
					
					var hasEntity = false;
					for (var j=0; j < this.model.get('RelationOntologyClassOntologyClassEntities').models.length; j++) {
						if (this.model.get('RelationOntologyClassOntologyClassEntities').models[j].get('IncomingOntologyClassEntity').get('OntologyClass').get('name') === entityFieldName) {
							hasEntity = true;
						}
					}
					
					if (!hasEntity) {
						var classEntity = window["IncomingOntologyClassEntity"].findOrCreate({
							id : null,
							OntologyClass : relations_ococ.models[i].get('IncomingOntologyClass')
						});
						
						var relClassEntity = window["RelationOntologyClassOntologyClassEntity"].findOrCreate({
							id : null,
							IncomingOntologyClassEntity : classEntity,
							OntologyRelationType : relations_ococ.models[i].get('OntologyRelationType')
						});
						
						this.model.get('RelationOntologyClassOntologyClassEntities').models.push(relClassEntity);
					}
					
					fieldView = this.createEntityFieldView(entityFieldName);
					
					fieldViews.push(fieldView);
				}
				
				
			}
		}
		
		var relations_ocop = this.model.get('OntologyClass').get('RelationOntologyClassOntologyProperties');
		
		for (var i=0; i < relations_ocop.length; i++) {
			var entityFieldName = relations_ocop.models[i].get('OntologyProperty').get('name');
			
			var hasEntity = false;
			for (var j=0; j < this.model.get('RelationOntologyClassOntologyPropertyEntities').models.length; j++) {
				if (this.model.get('RelationOntologyClassOntologyPropertyEntities').models[j].get('OntologyPropertyEntity').get('OntologyProperty').get('name') === entityFieldName) {
					hasEntity = true;
				}
			}
			if (!hasEntity) {
				var propertyEntity = window["OntologyPropertyEntity"].findOrCreate({
					id : null,
					OntologyProperty : relations_ocop.models[i].get('OntologyProperty')
				});
				
				var relPropertyEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
					id : null,
					OntologyPropertyEntity : propertyEntity
				});
				
				this.model.get('RelationOntologyClassOntologyPropertyEntities').models.push(relPropertyEntity);
			}
			
			fieldView = this.createEntityFieldView(entityFieldName);
			
			fieldViews.push(fieldView);
		}
		
		return fieldViews;
	},
	addField : function() {
		var ontologyProperty = window["OntologyProperty"].findOrCreate({
			id : null,
			name : null
		});
		var relOCOP = window["RelationOntologyClassOntologyProperty"].findOrCreate({
			id : null,
			OntologyClass : null,
			OntologyProperty : ontologyProperty
		});
		
		var ontologyPropertyEntity = window["OntologyPropertyEntity"].findOrCreate({
			id : null,
			name : null,
			OntologyProperty : ontologyProperty
		});
		var relOCOPEntity = window["RelationOntologyClassOntologyPropertyEntity"].findOrCreate({
			id : null,
			OntologyClassEntity : null,
			OntologyPropertyEntity : ontologyPropertyEntity
		});
		
		this.model.get('RelationOntologyClassOntologyPropertyEntities').models.push(relOCOPEntity);
		
		this.model.get('OntologyClass').get('RelationOntologyClassOntologyProperties').models.push(relOCOP);
		
		var entityFieldName = 'name';
		
		var newfieldView = this.createAdditionalFieldView(entityFieldName);
		
		this.fieldViews.push(newfieldView);
		
		this.render();
		
		return false;
	},
	saveObject : function() {
		var input_type;
		
		var relations_ocop = this.model.get('OntologyClass').get('RelationOntologyClassOntologyProperties');
		
		for (var i=0; i < relations_ocop.length; i++) {
			if (relations_ocop.models[i].isNew()) relations_ocop.models[i].save();
		}
		
			
		var attrs = { }, k;
		for(k in this.model.attributes) {
	        attrs[k] = this.model.attributes[k];
	        if (k !== "id") {
	        	input_type = $('#' + k).prop('type');
	        	
	        	//if (input_type !== "checkbox" && k.indexOf("relation") === -1) {
	        	if (input_type === "text") {
		        //if (input_type !== "checkbox" && k.indexOf("relation") === -1) {
	        		this.model.set(k, $('#' + k).val());
	        	}
	        }
	    }
		
		this.model.save({}, {
		    success: function(model){
		    	if (model.type.substr(-6, 6) === "Entity") {
		    		
		    		
		    		var url = window.location.href;
		    		
		    		if (url.substr(-1) == '/') url = url.substr(0, url.length - 2);

			    	url = url.split('/');
			    	url.pop();
			    	
			    	var target = url[url.length-2] + "/entities/#" + model.id + "/";
			    	
			    	
			    	//app.navigate("#212/entities/#46", true);
		    	} else {
		    		app.navigate('#' + model.id, true);
		    	}
		    }
		});
		
		accessMode = "read";
		
		this.render();
		
		return false;
	},
	render : function() {
		var data = {"hasFieldGroups": this.hasFieldGroups};

		this.$el.html(this.template(data));
		
		this.renderTitle(this.model.get('OntologyClass').get('name') + ": " + this.model.getNameProperty().get('name'));
 		
		if (this.hasFieldGroups) {
			this.renderFieldGroups();			
		} else {
			for (var i = 0; i < this.fieldViews.length; i++) {
				this.$("#field-container").append(this.fieldViews[i].render().el);
				this.fieldViews[i].delegateEvents();
			}
		}
		
		
		this.renderButtons();
		
		
		return this;
	}
});
		