

window.Corpus = Backbone.RelationalModel.extend({
	urlRoot : apiHost + "nlp/corpora",

	defaults : {
		"id" : null,
		"text" : "",
		"annotation" : ""
	}
});

window.CorpusCollection = Backbone.PageableCollection.extend({
	model : Corpus,
	url : apiHost + "nlp/corpora",
	state : {
		pageSize : 15
	},
	// get the state from Github's search API result
    parseState: function (resp, queryParams, state, options) {
      return {totalRecords: resp.total_count};
    },

    // get the actual records
    parseRecords: function (resp, options) {
      return resp.items;
    }
});
window.Lexeme = Master.extend({
	urlRoot : apiHost + "nlp/lexemes",

	defaults : {
		"id" : null,
		"name" : "",
		"Language" : null,
		"Words" : null,
		"OntologyClass" : null,
		"OntologyRelationType" : null,
		"OntologyProperty" : null,
		"OntologyClassEntity" : null,
		"OntologyPropertyEntity" : null
	}, initialize : function() {
	    this.set('Language', Language.findOrCreate({id: Cookie.get('UserLanguageID')}));
	}, relations : [ {
		type : Backbone.HasOne,
		key : 'Language',
		relatedModel : 'Language'
	}, {
		type : Backbone.HasMany,
		key : 'Words',
		relatedModel : 'Word',
		collectionType : 'WordCollection'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]
});

window.LexemeCollection = MasterCollection.extend({
	model : Lexeme,
	url : apiHost + "nlp/lexemes"
});


window.Language = Master.extend({
	type : "Language",
	defaults : {
		"id" : null,
		"isoCode" : "",
		"name" : ""
	},
	enumeration : [ {
		id : 0,
		text : "English"
	}, {
		id : 1,
		text : "German"
	} ]
});
window.POS = Backbone.RelationalModel.extend({
    url:"http://localhost.ontologydriven/api/nlp/tagpos",
    defaults:{
    	"tagged":""
    }
});

window.POSCollection = Backbone.Collection.extend({
    model:POS,
    url:"http://localhost.ontologydriven/api/nlp/tagpos"
});
window.Word = Master.extend({
	urlRoot : apiHost + "nlp/words",
	type : "Word",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Language" : null,
		"Lexeme" : null,
		"type" : "",
		"tagBrown" : "",
		"numerus" : "",
		"person" : "",
		"kasus" : "",
		"genus" : "",
		"tempus" : ""
	}, initialize : function() {
	    this.set('Language', Language.findOrCreate({id: Cookie.get('UserLanguageID')}));
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Language',
		relatedModel : 'Language'
	}, {
		type : Backbone.HasOne,
		key : 'Lexeme',
		relatedModel : 'Lexeme'
	} ]
});

window.WordCollection = MasterCollection.extend({
	model : Word,
	url : apiHost + "nlp/words"
});

window.Corpus = Backbone.RelationalModel.extend({
	urlRoot : apiHost + "nlp/corpora",

	defaults : {
		"id" : null,
		"text" : "",
		"annotation" : ""
	}
});

window.CorpusCollection = Backbone.PageableCollection.extend({
	model : Corpus,
	url : apiHost + "nlp/corpora",
	state : {
		pageSize : 15
	},
	// get the state from Github's search API result
    parseState: function (resp, queryParams, state, options) {
      return {totalRecords: resp.total_count};
    },

    // get the actual records
    parseRecords: function (resp, options) {
      return resp.items;
    }
});
window.Lexeme = Master.extend({
	urlRoot : apiHost + "nlp/lexemes",

	defaults : {
		"id" : null,
		"name" : "",
		"Language" : null,
		"Words" : null,
		"OntologyClass" : null,
		"OntologyRelationType" : null,
		"OntologyProperty" : null,
		"OntologyClassEntity" : null,
		"OntologyPropertyEntity" : null
	}, initialize : function() {
	    this.set('Language', Language.findOrCreate({id: Cookie.get('UserLanguageID')}));
	}, relations : [ {
		type : Backbone.HasOne,
		key : 'Language',
		relatedModel : 'Language'
	}, {
		type : Backbone.HasMany,
		key : 'Words',
		relatedModel : 'Word',
		collectionType : 'WordCollection'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]
});

window.LexemeCollection = MasterCollection.extend({
	model : Lexeme,
	url : apiHost + "nlp/lexemes"
});


window.Language = Master.extend({
	type : "Language",
	defaults : {
		"id" : null,
		"isoCode" : "",
		"name" : ""
	},
	enumeration : [ {
		id : 0,
		text : "English"
	}, {
		id : 1,
		text : "German"
	} ]
});
window.POS = Backbone.RelationalModel.extend({
    url:"http://localhost.ontologydriven/api/nlp/tagpos",
    defaults:{
    	"tagged":""
    }
});

window.POSCollection = Backbone.Collection.extend({
    model:POS,
    url:"http://localhost.ontologydriven/api/nlp/tagpos"
});
window.Word = Master.extend({
	urlRoot : apiHost + "nlp/words",
	type : "Word",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Language" : null,
		"Lexeme" : null,
		"type" : "",
		"tagBrown" : "",
		"numerus" : "",
		"person" : "",
		"kasus" : "",
		"genus" : "",
		"tempus" : ""
	}, initialize : function() {
	    this.set('Language', Language.findOrCreate({id: Cookie.get('UserLanguageID')}));
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Language',
		relatedModel : 'Language'
	}, {
		type : Backbone.HasOne,
		key : 'Lexeme',
		relatedModel : 'Lexeme'
	} ]
});

window.WordCollection = MasterCollection.extend({
	model : Word,
	url : apiHost + "nlp/words"
});
window.LexemeAccordionView = Backbone.View.extend({


    initialize:function () {
        this.model.bind("reset", this.render, this);
        var self = this;
        this.model.bind("add", function (beeronlineshoporder) {
            $(self.el).append(new LexemeListItemView({model:lexeme}).render().el);
        });
    },

    render:function (eventName) {
        _.each(this.model.models, function (lexeme) {
            $(this.el).append(new LexemeListItemView({model:lexeme}).render().el);
        }, this);
        return this;
    }
});

window.LexemeAccordionGroupView = Backbone.View.extend({

    initialize:function () {
        this.template = _.template(tpl.get('accordiongroup_lexeme'));
    },

    render:function (eventName) {
        $(this.el).html(this.template());
        return this;
    }

});
window.WordAccordionView = Backbone.View.extend({


    initialize:function () {
        this.model.bind("reset", this.render, this);
        var self = this;
        this.model.bind("add", function (beeronlineshoporder) {
            $(self.el).append(new WordListItemView({model:word}).render().el);
        });
    },

    render:function (eventName) {
        _.each(this.model.models, function (word) {
            $(this.el).append(new WordListItemView({model:word}).render().el);
        }, this);
        return this;
    }
});

window.WordAccordionGroupView = Backbone.View.extend({

    initialize:function () {
        this.template = _.template(tpl.get('accordiongroup_word'));
    },

    render:function (eventName) {
        $(this.el).html(this.template());
        return this;
    }

});
window.ActionView = Backbone.View.extend({
		
		
    initialize:function () {
        this.template = _.template(tpl.get('action_addnew'));
	},

    events:{
        "click #btn_add":"newObject"
    },

    newObject:function () {
         app.navigate('new', true);
    },

    render: function () {
        this.$el.html(this.template());
        return this;
    }
});
		
window.AdminCorpusView = Backbone.View.extend({

    tagName:"div", // Not required since 'div' is the default if no el or tagName specified

    initialize:function () {
        this.template = _.template(tpl.get('admin_corpus'));
        
        this.render();
        
    },

    events:{
        "click #btn_parse":"parseRessource"
    },
    render: function () {
        this.$el.html(this.template());
		
        this.$("#input-1").fileinput({'showUpload':true, 'previewFileType':'any', 'uploadUrl': 'http://localhost.ontologydriven/api/nlp/corpora/brown/fileupload'});
     	
        this.$("#input-2").fileinput({'showUpload':true, 'previewFileType':'any', 'uploadUrl': 'http://localhost.ontologydriven/api/nlp/corpora/tiger/fileupload'});
     	
        return this;
    }
});

window.AdminWordsView = Backbone.View.extend({

    tagName:"div", // Not required since 'div' is the default if no el or tagName specified

    initialize:function () {
        this.template = _.template(tpl.get('admin_word'));
        
        this.render();
        
    },

    events:{
        "click #btn_parse":"parseRessource"
    },
    render: function () {
        this.$el.html(this.template());
		
        this.$("#input-1").fileinput({'showUpload':true, 'previewFileType':'any', 'uploadUrl': 'http://localhost.ontologydriven/api/nlp/words/wordnet/fileupload'});
     	

        return this;
    }
});
window.SelectView = Backbone.View
		.extend({
			tagName : "select",

			initialize : function(data) {
				this.model = data.model;
				this.options = data.options;
				this.fieldName = data.fieldName;
			},

			events : {
				'change' : 'onselect'
			},
			onselect : function() {
				if (this.el.options[this.el.selectedIndex]) {
					var attribute = {};
					attribute[this.fieldName] = this.el.options[this.el.selectedIndex].value;
					
					this.model.set(attribute);
				}

				return this;
			},

			render : function() {
				for (var i = 0; i < this.options.length; i++) {
					if (this.options[i].id == this.model.get(this.fieldName)) {
						this.$el.append('<option value="'
								+ this.options[i].id
								+ '" selected="true">'
								+ this.options[i].value
								+ '</option>');
					} else {
						this.$el.append('<option value="'
								+ this.options[i].id
								+ '">'
								+ this.options[i].value
								+ '</option>');
					}
				}

				this.onselect();

				return this;
			}
		});

var OptionView = Backbone.View.extend({

	tagName : "option",
	render : function() {
		var name = this.model.get("Ontologyrelationtype_name");
		var id = this.model.get("id");

		if (id == this.options.OntologyrelationtypeID) {
			this.$el.html(name).val(id);
			this.$el.prop('selected', true);
		} else {
			this.$el.html(name).val(id);
		}

		return this;
	}
});
window.LexemeSelectView = Backbone.View.extend({

    initialize:function () {
        this.template = _.template(tpl.get('select_lexeme'));
        
        _.bindAll(this, 'render');
        
        this.model.bind('change', this.render);
        this.model.bind('reset', this.render);
    },

    events:{
    },
    
    render: function () {
        this.$el.html(this.template(this.model.attributes));//this.$('#lexeme_').datepicker({autoclose: true});     
        return this;
    }
});
		
window.WordSelectView = Backbone.View.extend({

    initialize:function () {
        this.template = _.template(tpl.get('select_word'));
        
        _.bindAll(this, 'render');
        
        this.model.bind('change', this.render);
        this.model.bind('reset', this.render);
    },

    events:{
    },
    
    render: function () {
        this.$el.html(this.template(this.model.attributes));//this.$('#word_').datepicker({autoclose: true});     
        return this;
    }
});
		
window.LexemeAccordionView = Backbone.View.extend({


    initialize:function () {
        this.model.bind("reset", this.render, this);
        var self = this;
        this.model.bind("add", function (beeronlineshoporder) {
            $(self.el).append(new LexemeListItemView({model:lexeme}).render().el);
        });
    },

    render:function (eventName) {
        _.each(this.model.models, function (lexeme) {
            $(this.el).append(new LexemeListItemView({model:lexeme}).render().el);
        }, this);
        return this;
    }
});

window.LexemeAccordionGroupView = Backbone.View.extend({

    initialize:function () {
        this.template = _.template(tpl.get('accordiongroup_lexeme'));
    },

    render:function (eventName) {
        $(this.el).html(this.template());
        return this;
    }

});
window.WordAccordionView = Backbone.View.extend({


    initialize:function () {
        this.model.bind("reset", this.render, this);
        var self = this;
        this.model.bind("add", function (beeronlineshoporder) {
            $(self.el).append(new WordListItemView({model:word}).render().el);
        });
    },

    render:function (eventName) {
        _.each(this.model.models, function (word) {
            $(this.el).append(new WordListItemView({model:word}).render().el);
        }, this);
        return this;
    }
});

window.WordAccordionGroupView = Backbone.View.extend({

    initialize:function () {
        this.template = _.template(tpl.get('accordiongroup_word'));
    },

    render:function (eventName) {
        $(this.el).html(this.template());
        return this;
    }

});
window.ActionView = Backbone.View.extend({
		
		
    initialize:function () {
        this.template = _.template(tpl.get('action_addnew'));
	},

    events:{
        "click #btn_add":"newObject"
    },

    newObject:function () {
         app.navigate('new', true);
    },

    render: function () {
        this.$el.html(this.template());
        return this;
    }
});
		
window.AdminCorpusView = Backbone.View.extend({

    tagName:"div", // Not required since 'div' is the default if no el or tagName specified

    initialize:function () {
        this.template = _.template(tpl.get('admin_corpus'));
        
        this.render();
        
    },

    events:{
        "click #btn_parse":"parseRessource"
    },
    render: function () {
        this.$el.html(this.template());
		
        this.$("#input-1").fileinput({'showUpload':true, 'previewFileType':'any', 'uploadUrl': 'http://localhost.ontologydriven/api/nlp/corpora/brown/fileupload'});
     	
        this.$("#input-2").fileinput({'showUpload':true, 'previewFileType':'any', 'uploadUrl': 'http://localhost.ontologydriven/api/nlp/corpora/tiger/fileupload'});
     	
        return this;
    }
});

window.AdminWordsView = Backbone.View.extend({

    tagName:"div", // Not required since 'div' is the default if no el or tagName specified

    initialize:function () {
        this.template = _.template(tpl.get('admin_word'));
        
        this.render();
        
    },

    events:{
        "click #btn_parse":"parseRessource"
    },
    render: function () {
        this.$el.html(this.template());
		
        this.$("#input-1").fileinput({'showUpload':true, 'previewFileType':'any', 'uploadUrl': 'http://localhost.ontologydriven/api/nlp/words/wordnet/fileupload'});
     	

        return this;
    }
});
window.SelectView = Backbone.View
		.extend({
			tagName : "select",

			initialize : function(data) {
				this.model = data.model;
				this.options = data.options;
				this.fieldName = data.fieldName;
			},

			events : {
				'change' : 'onselect'
			},
			onselect : function() {
				if (this.el.options[this.el.selectedIndex]) {
					var attribute = {};
					attribute[this.fieldName] = this.el.options[this.el.selectedIndex].value;
					
					this.model.set(attribute);
				}

				return this;
			},

			render : function() {
				for (var i = 0; i < this.options.length; i++) {
					if (this.options[i].id == this.model.get(this.fieldName)) {
						this.$el.append('<option value="'
								+ this.options[i].id
								+ '" selected="true">'
								+ this.options[i].value
								+ '</option>');
					} else {
						this.$el.append('<option value="'
								+ this.options[i].id
								+ '">'
								+ this.options[i].value
								+ '</option>');
					}
				}

				this.onselect();

				return this;
			}
		});

var OptionView = Backbone.View.extend({

	tagName : "option",
	render : function() {
		var name = this.model.get("Ontologyrelationtype_name");
		var id = this.model.get("id");

		if (id == this.options.OntologyrelationtypeID) {
			this.$el.html(name).val(id);
			this.$el.prop('selected', true);
		} else {
			this.$el.html(name).val(id);
		}

		return this;
	}
});
window.LexemeSelectView = Backbone.View.extend({

    initialize:function () {
        this.template = _.template(tpl.get('select_lexeme'));
        
        _.bindAll(this, 'render');
        
        this.model.bind('change', this.render);
        this.model.bind('reset', this.render);
    },

    events:{
    },
    
    render: function () {
        this.$el.html(this.template(this.model.attributes));//this.$('#lexeme_').datepicker({autoclose: true});     
        return this;
    }
});
		
window.WordSelectView = Backbone.View.extend({

    initialize:function () {
        this.template = _.template(tpl.get('select_word'));
        
        _.bindAll(this, 'render');
        
        this.model.bind('change', this.render);
        this.model.bind('reset', this.render);
    },

    events:{
    },
    
    render: function () {
        this.$el.html(this.template(this.model.attributes));//this.$('#word_').datepicker({autoclose: true});     
        return this;
    }
});
		
window.Corpus = Backbone.RelationalModel.extend({
	urlRoot : apiHost + "nlp/corpora",

	defaults : {
		"id" : null,
		"text" : "",
		"annotation" : ""
	}
});

window.CorpusCollection = Backbone.PageableCollection.extend({
	model : Corpus,
	url : apiHost + "nlp/corpora",
	state : {
		pageSize : 15
	},
	// get the state from Github's search API result
    parseState: function (resp, queryParams, state, options) {
      return {totalRecords: resp.total_count};
    },

    // get the actual records
    parseRecords: function (resp, options) {
      return resp.items;
    }
});
window.Lexeme = Master.extend({
	urlRoot : apiHost + "nlp/lexemes",

	defaults : {
		"id" : null,
		"name" : "",
		"Language" : null,
		"Words" : null,
		"OntologyClass" : null,
		"OntologyRelationType" : null,
		"OntologyProperty" : null,
		"OntologyClassEntity" : null,
		"OntologyPropertyEntity" : null
	}, initialize : function() {
	    this.set('Language', Language.findOrCreate({id: Cookie.get('UserLanguageID')}));
	}, relations : [ {
		type : Backbone.HasOne,
		key : 'Language',
		relatedModel : 'Language'
	}, {
		type : Backbone.HasMany,
		key : 'Words',
		relatedModel : 'Word',
		collectionType : 'WordCollection'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyClass',
		relatedModel : 'OntologyClass'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyRelationType',
		relatedModel : 'OntologyRelationType'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyProperty',
		relatedModel : 'OntologyProperty'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyClassEntity',
		relatedModel : 'OntologyClassEntity'
	}, {
		type : Backbone.HasOne,
		key : 'OntologyPropertyEntity',
		relatedModel : 'OntologyPropertyEntity'
	} ]
});

window.LexemeCollection = MasterCollection.extend({
	model : Lexeme,
	url : apiHost + "nlp/lexemes"
});


window.Language = Master.extend({
	type : "Language",
	defaults : {
		"id" : null,
		"isoCode" : "",
		"name" : ""
	},
	enumeration : [ {
		id : 0,
		text : "English"
	}, {
		id : 1,
		text : "German"
	} ]
});
window.POS = Backbone.RelationalModel.extend({
    url:"http://localhost.ontologydriven/api/nlp/tagpos",
    defaults:{
    	"tagged":""
    }
});

window.POSCollection = Backbone.Collection.extend({
    model:POS,
    url:"http://localhost.ontologydriven/api/nlp/tagpos"
});
window.Word = Master.extend({
	urlRoot : apiHost + "nlp/words",
	type : "Word",
	
	defaults : {
		"id" : null,
		"name" : "",
		"Language" : null,
		"Lexeme" : null,
		"type" : "",
		"tagBrown" : "",
		"numerus" : "",
		"person" : "",
		"kasus" : "",
		"genus" : "",
		"tempus" : ""
	}, initialize : function() {
	    this.set('Language', Language.findOrCreate({id: Cookie.get('UserLanguageID')}));
	},
	relations : [ {
		type : Backbone.HasOne,
		key : 'Language',
		relatedModel : 'Language'
	}, {
		type : Backbone.HasOne,
		key : 'Lexeme',
		relatedModel : 'Lexeme'
	} ]
});

window.WordCollection = MasterCollection.extend({
	model : Word,
	url : apiHost + "nlp/words"
});
window.LexemeAccordionView = Backbone.View.extend({


    initialize:function () {
        this.model.bind("reset", this.render, this);
        var self = this;
        this.model.bind("add", function (beeronlineshoporder) {
            $(self.el).append(new LexemeListItemView({model:lexeme}).render().el);
        });
    },

    render:function (eventName) {
        _.each(this.model.models, function (lexeme) {
            $(this.el).append(new LexemeListItemView({model:lexeme}).render().el);
        }, this);
        return this;
    }
});

window.LexemeAccordionGroupView = Backbone.View.extend({

    initialize:function () {
        this.template = _.template(tpl.get('accordiongroup_lexeme'));
    },

    render:function (eventName) {
        $(this.el).html(this.template());
        return this;
    }

});
window.WordAccordionView = Backbone.View.extend({


    initialize:function () {
        this.model.bind("reset", this.render, this);
        var self = this;
        this.model.bind("add", function (beeronlineshoporder) {
            $(self.el).append(new WordListItemView({model:word}).render().el);
        });
    },

    render:function (eventName) {
        _.each(this.model.models, function (word) {
            $(this.el).append(new WordListItemView({model:word}).render().el);
        }, this);
        return this;
    }
});

window.WordAccordionGroupView = Backbone.View.extend({

    initialize:function () {
        this.template = _.template(tpl.get('accordiongroup_word'));
    },

    render:function (eventName) {
        $(this.el).html(this.template());
        return this;
    }

});
window.ActionView = Backbone.View.extend({
		
		
    initialize:function () {
        this.template = _.template(tpl.get('action_addnew'));
	},

    events:{
        "click #btn_add":"newObject"
    },

    newObject:function () {
         app.navigate('new', true);
    },

    render: function () {
        this.$el.html(this.template());
        return this;
    }
});
		
window.AdminCorpusView = Backbone.View.extend({

    tagName:"div", // Not required since 'div' is the default if no el or tagName specified

    initialize:function () {
        this.template = _.template(tpl.get('admin_corpus'));
        
        this.render();
        
    },

    events:{
        "click #btn_parse":"parseRessource"
    },
    render: function () {
        this.$el.html(this.template());
		
        this.$("#input-1").fileinput({'showUpload':true, 'previewFileType':'any', 'uploadUrl': 'http://localhost.ontologydriven/api/nlp/corpora/brown/fileupload'});
     	
        this.$("#input-2").fileinput({'showUpload':true, 'previewFileType':'any', 'uploadUrl': 'http://localhost.ontologydriven/api/nlp/corpora/tiger/fileupload'});
     	
        return this;
    }
});

window.AdminWordsView = Backbone.View.extend({

    tagName:"div", // Not required since 'div' is the default if no el or tagName specified

    initialize:function () {
        this.template = _.template(tpl.get('admin_word'));
        
        this.render();
        
    },

    events:{
        "click #btn_parse":"parseRessource"
    },
    render: function () {
        this.$el.html(this.template());
		
        this.$("#input-1").fileinput({'showUpload':true, 'previewFileType':'any', 'uploadUrl': 'http://localhost.ontologydriven/api/nlp/words/wordnet/fileupload'});
     	

        return this;
    }
});
window.SelectView = Backbone.View
		.extend({
			tagName : "select",

			initialize : function(data) {
				this.model = data.model;
				this.options = data.options;
				this.fieldName = data.fieldName;
			},

			events : {
				'change' : 'onselect'
			},
			onselect : function() {
				if (this.el.options[this.el.selectedIndex]) {
					var attribute = {};
					attribute[this.fieldName] = this.el.options[this.el.selectedIndex].value;
					
					this.model.set(attribute);
				}

				return this;
			},

			render : function() {
				for (var i = 0; i < this.options.length; i++) {
					if (this.options[i].id == this.model.get(this.fieldName)) {
						this.$el.append('<option value="'
								+ this.options[i].id
								+ '" selected="true">'
								+ this.options[i].value
								+ '</option>');
					} else {
						this.$el.append('<option value="'
								+ this.options[i].id
								+ '">'
								+ this.options[i].value
								+ '</option>');
					}
				}

				this.onselect();

				return this;
			}
		});

var OptionView = Backbone.View.extend({

	tagName : "option",
	render : function() {
		var name = this.model.get("Ontologyrelationtype_name");
		var id = this.model.get("id");

		if (id == this.options.OntologyrelationtypeID) {
			this.$el.html(name).val(id);
			this.$el.prop('selected', true);
		} else {
			this.$el.html(name).val(id);
		}

		return this;
	}
});
window.LexemeSelectView = Backbone.View.extend({

    initialize:function () {
        this.template = _.template(tpl.get('select_lexeme'));
        
        _.bindAll(this, 'render');
        
        this.model.bind('change', this.render);
        this.model.bind('reset', this.render);
    },

    events:{
    },
    
    render: function () {
        this.$el.html(this.template(this.model.attributes));//this.$('#lexeme_').datepicker({autoclose: true});     
        return this;
    }
});
		
window.WordSelectView = Backbone.View.extend({

    initialize:function () {
        this.template = _.template(tpl.get('select_word'));
        
        _.bindAll(this, 'render');
        
        this.model.bind('change', this.render);
        this.model.bind('reset', this.render);
    },

    events:{
    },
    
    render: function () {
        this.$el.html(this.template(this.model.attributes));//this.$('#word_').datepicker({autoclose: true});     
        return this;
    }
});
		